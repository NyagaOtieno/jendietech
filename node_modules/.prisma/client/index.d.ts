
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model RollCallUser
 * 
 */
export type RollCallUser = $Result.DefaultSelection<Prisma.$RollCallUserPayload>
/**
 * Model RollCall
 * 
 */
export type RollCall = $Result.DefaultSelection<Prisma.$RollCallPayload>
/**
 * Model Photo
 * 
 */
export type Photo = $Result.DefaultSelection<Prisma.$PhotoPayload>
/**
 * Model JobHistory
 * 
 */
export type JobHistory = $Result.DefaultSelection<Prisma.$JobHistoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  TECHNICIAN: 'TECHNICIAN',
  STAFF: 'STAFF'
};

export type Role = (typeof Role)[keyof typeof Role]


export const JobType: {
  INSTALL: 'INSTALL',
  RENEWAL: 'RENEWAL',
  FAULT_CHECK: 'FAULT_CHECK',
  REPAIR: 'REPAIR'
};

export type JobType = (typeof JobType)[keyof typeof JobType]


export const JobStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE',
  NOT_DONE: 'NOT_DONE',
  ESCALATED: 'ESCALATED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type JobType = $Enums.JobType

export const JobType: typeof $Enums.JobType

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rollCallUser`: Exposes CRUD operations for the **RollCallUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RollCallUsers
    * const rollCallUsers = await prisma.rollCallUser.findMany()
    * ```
    */
  get rollCallUser(): Prisma.RollCallUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rollCall`: Exposes CRUD operations for the **RollCall** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RollCalls
    * const rollCalls = await prisma.rollCall.findMany()
    * ```
    */
  get rollCall(): Prisma.RollCallDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photo.findMany()
    * ```
    */
  get photo(): Prisma.PhotoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobHistory`: Exposes CRUD operations for the **JobHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobHistories
    * const jobHistories = await prisma.jobHistory.findMany()
    * ```
    */
  get jobHistory(): Prisma.JobHistoryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Job: 'Job',
    Session: 'Session',
    RollCallUser: 'RollCallUser',
    RollCall: 'RollCall',
    Photo: 'Photo',
    JobHistory: 'JobHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "job" | "session" | "rollCallUser" | "rollCall" | "photo" | "jobHistory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      RollCallUser: {
        payload: Prisma.$RollCallUserPayload<ExtArgs>
        fields: Prisma.RollCallUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RollCallUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RollCallUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>
          }
          findFirst: {
            args: Prisma.RollCallUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RollCallUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>
          }
          findMany: {
            args: Prisma.RollCallUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>[]
          }
          create: {
            args: Prisma.RollCallUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>
          }
          createMany: {
            args: Prisma.RollCallUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RollCallUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>[]
          }
          delete: {
            args: Prisma.RollCallUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>
          }
          update: {
            args: Prisma.RollCallUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>
          }
          deleteMany: {
            args: Prisma.RollCallUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RollCallUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RollCallUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>[]
          }
          upsert: {
            args: Prisma.RollCallUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallUserPayload>
          }
          aggregate: {
            args: Prisma.RollCallUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRollCallUser>
          }
          groupBy: {
            args: Prisma.RollCallUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<RollCallUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.RollCallUserCountArgs<ExtArgs>
            result: $Utils.Optional<RollCallUserCountAggregateOutputType> | number
          }
        }
      }
      RollCall: {
        payload: Prisma.$RollCallPayload<ExtArgs>
        fields: Prisma.RollCallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RollCallFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RollCallFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          findFirst: {
            args: Prisma.RollCallFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RollCallFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          findMany: {
            args: Prisma.RollCallFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>[]
          }
          create: {
            args: Prisma.RollCallCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          createMany: {
            args: Prisma.RollCallCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RollCallCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>[]
          }
          delete: {
            args: Prisma.RollCallDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          update: {
            args: Prisma.RollCallUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          deleteMany: {
            args: Prisma.RollCallDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RollCallUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RollCallUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>[]
          }
          upsert: {
            args: Prisma.RollCallUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          aggregate: {
            args: Prisma.RollCallAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRollCall>
          }
          groupBy: {
            args: Prisma.RollCallGroupByArgs<ExtArgs>
            result: $Utils.Optional<RollCallGroupByOutputType>[]
          }
          count: {
            args: Prisma.RollCallCountArgs<ExtArgs>
            result: $Utils.Optional<RollCallCountAggregateOutputType> | number
          }
        }
      }
      Photo: {
        payload: Prisma.$PhotoPayload<ExtArgs>
        fields: Prisma.PhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhotoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhotoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          findFirst: {
            args: Prisma.PhotoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhotoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          findMany: {
            args: Prisma.PhotoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>[]
          }
          create: {
            args: Prisma.PhotoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          createMany: {
            args: Prisma.PhotoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhotoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>[]
          }
          delete: {
            args: Prisma.PhotoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          update: {
            args: Prisma.PhotoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          deleteMany: {
            args: Prisma.PhotoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhotoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PhotoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>[]
          }
          upsert: {
            args: Prisma.PhotoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          aggregate: {
            args: Prisma.PhotoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhoto>
          }
          groupBy: {
            args: Prisma.PhotoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhotoCountArgs<ExtArgs>
            result: $Utils.Optional<PhotoCountAggregateOutputType> | number
          }
        }
      }
      JobHistory: {
        payload: Prisma.$JobHistoryPayload<ExtArgs>
        fields: Prisma.JobHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>
          }
          findFirst: {
            args: Prisma.JobHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>
          }
          findMany: {
            args: Prisma.JobHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>[]
          }
          create: {
            args: Prisma.JobHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>
          }
          createMany: {
            args: Prisma.JobHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>[]
          }
          delete: {
            args: Prisma.JobHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>
          }
          update: {
            args: Prisma.JobHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>
          }
          deleteMany: {
            args: Prisma.JobHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>[]
          }
          upsert: {
            args: Prisma.JobHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHistoryPayload>
          }
          aggregate: {
            args: Prisma.JobHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobHistory>
          }
          groupBy: {
            args: Prisma.JobHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<JobHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    job?: JobOmit
    session?: SessionOmit
    rollCallUser?: RollCallUserOmit
    rollCall?: RollCallOmit
    photo?: PhotoOmit
    jobHistory?: JobHistoryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    jobs: number
    rollCallUsers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    jobs?: boolean | UserCountOutputTypeCountJobsArgs
    rollCallUsers?: boolean | UserCountOutputTypeCountRollCallUsersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRollCallUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RollCallUserWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    photos: number
    history: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | JobCountOutputTypeCountPhotosArgs
    history?: boolean | JobCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobHistoryWhereInput
  }


  /**
   * Count Type RollCallCountOutputType
   */

  export type RollCallCountOutputType = {
    presentUsers: number
  }

  export type RollCallCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentUsers?: boolean | RollCallCountOutputTypeCountPresentUsersArgs
  }

  // Custom InputTypes
  /**
   * RollCallCountOutputType without action
   */
  export type RollCallCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallCountOutputType
     */
    select?: RollCallCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RollCallCountOutputType without action
   */
  export type RollCallCountOutputTypeCountPresentUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RollCallUserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    role: $Enums.Role | null
    region: string | null
    password: string | null
    online: boolean | null
    lastLogin: Date | null
    lastLogout: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    role: $Enums.Role | null
    region: string | null
    password: string | null
    online: boolean | null
    lastLogin: Date | null
    lastLogout: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    role: number
    region: number
    password: number
    online: number
    lastLogin: number
    lastLogout: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    role?: true
    region?: true
    password?: true
    online?: true
    lastLogin?: true
    lastLogout?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    role?: true
    region?: true
    password?: true
    online?: true
    lastLogin?: true
    lastLogout?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    role?: true
    region?: true
    password?: true
    online?: true
    lastLogin?: true
    lastLogout?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string | null
    phone: string | null
    role: $Enums.Role
    region: string | null
    password: string
    online: boolean
    lastLogin: Date | null
    lastLogout: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    role?: boolean
    region?: boolean
    password?: boolean
    online?: boolean
    lastLogin?: boolean
    lastLogout?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    jobs?: boolean | User$jobsArgs<ExtArgs>
    rollCallUsers?: boolean | User$rollCallUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    role?: boolean
    region?: boolean
    password?: boolean
    online?: boolean
    lastLogin?: boolean
    lastLogout?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    role?: boolean
    region?: boolean
    password?: boolean
    online?: boolean
    lastLogin?: boolean
    lastLogout?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    role?: boolean
    region?: boolean
    password?: boolean
    online?: boolean
    lastLogin?: boolean
    lastLogout?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "role" | "region" | "password" | "online" | "lastLogin" | "lastLogout", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    jobs?: boolean | User$jobsArgs<ExtArgs>
    rollCallUsers?: boolean | User$rollCallUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      jobs: Prisma.$JobPayload<ExtArgs>[]
      rollCallUsers: Prisma.$RollCallUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string | null
      phone: string | null
      role: $Enums.Role
      region: string | null
      password: string
      online: boolean
      lastLogin: Date | null
      lastLogout: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobs<T extends User$jobsArgs<ExtArgs> = {}>(args?: Subset<T, User$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rollCallUsers<T extends User$rollCallUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$rollCallUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly region: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly online: FieldRef<"User", 'Boolean'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly lastLogout: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.jobs
   */
  export type User$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * User.rollCallUsers
   */
  export type User$rollCallUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    where?: RollCallUserWhereInput
    orderBy?: RollCallUserOrderByWithRelationInput | RollCallUserOrderByWithRelationInput[]
    cursor?: RollCallUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RollCallUserScalarFieldEnum | RollCallUserScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number | null
    technicianId: number | null
  }

  export type JobSumAggregateOutputType = {
    id: number | null
    technicianId: number | null
  }

  export type JobMinAggregateOutputType = {
    id: number | null
    vehicleReg: string | null
    jobType: $Enums.JobType | null
    status: $Enums.JobStatus | null
    scheduledDate: Date | null
    location: string | null
    governorSerial: string | null
    governorStatus: string | null
    clientName: string | null
    clientPhone: string | null
    remarks: string | null
    photoUrl: string | null
    clientSignature: string | null
    createdAt: Date | null
    technicianId: number | null
  }

  export type JobMaxAggregateOutputType = {
    id: number | null
    vehicleReg: string | null
    jobType: $Enums.JobType | null
    status: $Enums.JobStatus | null
    scheduledDate: Date | null
    location: string | null
    governorSerial: string | null
    governorStatus: string | null
    clientName: string | null
    clientPhone: string | null
    remarks: string | null
    photoUrl: string | null
    clientSignature: string | null
    createdAt: Date | null
    technicianId: number | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    vehicleReg: number
    jobType: number
    status: number
    scheduledDate: number
    location: number
    governorSerial: number
    governorStatus: number
    clientName: number
    clientPhone: number
    remarks: number
    photoUrl: number
    clientSignature: number
    createdAt: number
    technicianId: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
    technicianId?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
    technicianId?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    vehicleReg?: true
    jobType?: true
    status?: true
    scheduledDate?: true
    location?: true
    governorSerial?: true
    governorStatus?: true
    clientName?: true
    clientPhone?: true
    remarks?: true
    photoUrl?: true
    clientSignature?: true
    createdAt?: true
    technicianId?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    vehicleReg?: true
    jobType?: true
    status?: true
    scheduledDate?: true
    location?: true
    governorSerial?: true
    governorStatus?: true
    clientName?: true
    clientPhone?: true
    remarks?: true
    photoUrl?: true
    clientSignature?: true
    createdAt?: true
    technicianId?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    vehicleReg?: true
    jobType?: true
    status?: true
    scheduledDate?: true
    location?: true
    governorSerial?: true
    governorStatus?: true
    clientName?: true
    clientPhone?: true
    remarks?: true
    photoUrl?: true
    clientSignature?: true
    createdAt?: true
    technicianId?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: number
    vehicleReg: string
    jobType: $Enums.JobType
    status: $Enums.JobStatus
    scheduledDate: Date
    location: string | null
    governorSerial: string | null
    governorStatus: string | null
    clientName: string | null
    clientPhone: string | null
    remarks: string | null
    photoUrl: string | null
    clientSignature: string | null
    createdAt: Date
    technicianId: number | null
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vehicleReg?: boolean
    jobType?: boolean
    status?: boolean
    scheduledDate?: boolean
    location?: boolean
    governorSerial?: boolean
    governorStatus?: boolean
    clientName?: boolean
    clientPhone?: boolean
    remarks?: boolean
    photoUrl?: boolean
    clientSignature?: boolean
    createdAt?: boolean
    technicianId?: boolean
    assignedTechnician?: boolean | Job$assignedTechnicianArgs<ExtArgs>
    photos?: boolean | Job$photosArgs<ExtArgs>
    history?: boolean | Job$historyArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vehicleReg?: boolean
    jobType?: boolean
    status?: boolean
    scheduledDate?: boolean
    location?: boolean
    governorSerial?: boolean
    governorStatus?: boolean
    clientName?: boolean
    clientPhone?: boolean
    remarks?: boolean
    photoUrl?: boolean
    clientSignature?: boolean
    createdAt?: boolean
    technicianId?: boolean
    assignedTechnician?: boolean | Job$assignedTechnicianArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vehicleReg?: boolean
    jobType?: boolean
    status?: boolean
    scheduledDate?: boolean
    location?: boolean
    governorSerial?: boolean
    governorStatus?: boolean
    clientName?: boolean
    clientPhone?: boolean
    remarks?: boolean
    photoUrl?: boolean
    clientSignature?: boolean
    createdAt?: boolean
    technicianId?: boolean
    assignedTechnician?: boolean | Job$assignedTechnicianArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    vehicleReg?: boolean
    jobType?: boolean
    status?: boolean
    scheduledDate?: boolean
    location?: boolean
    governorSerial?: boolean
    governorStatus?: boolean
    clientName?: boolean
    clientPhone?: boolean
    remarks?: boolean
    photoUrl?: boolean
    clientSignature?: boolean
    createdAt?: boolean
    technicianId?: boolean
  }

  export type JobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "vehicleReg" | "jobType" | "status" | "scheduledDate" | "location" | "governorSerial" | "governorStatus" | "clientName" | "clientPhone" | "remarks" | "photoUrl" | "clientSignature" | "createdAt" | "technicianId", ExtArgs["result"]["job"]>
  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTechnician?: boolean | Job$assignedTechnicianArgs<ExtArgs>
    photos?: boolean | Job$photosArgs<ExtArgs>
    history?: boolean | Job$historyArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTechnician?: boolean | Job$assignedTechnicianArgs<ExtArgs>
  }
  export type JobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTechnician?: boolean | Job$assignedTechnicianArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      assignedTechnician: Prisma.$UserPayload<ExtArgs> | null
      photos: Prisma.$PhotoPayload<ExtArgs>[]
      history: Prisma.$JobHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      vehicleReg: string
      jobType: $Enums.JobType
      status: $Enums.JobStatus
      scheduledDate: Date
      location: string | null
      governorSerial: string | null
      governorStatus: string | null
      clientName: string | null
      clientPhone: string | null
      remarks: string | null
      photoUrl: string | null
      clientSignature: string | null
      createdAt: Date
      technicianId: number | null
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs and returns the data updated in the database.
     * @param {JobUpdateManyAndReturnArgs} args - Arguments to update many Jobs.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobUpdateManyAndReturnArgs>(args: SelectSubset<T, JobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedTechnician<T extends Job$assignedTechnicianArgs<ExtArgs> = {}>(args?: Subset<T, Job$assignedTechnicianArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    photos<T extends Job$photosArgs<ExtArgs> = {}>(args?: Subset<T, Job$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    history<T extends Job$historyArgs<ExtArgs> = {}>(args?: Subset<T, Job$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'Int'>
    readonly vehicleReg: FieldRef<"Job", 'String'>
    readonly jobType: FieldRef<"Job", 'JobType'>
    readonly status: FieldRef<"Job", 'JobStatus'>
    readonly scheduledDate: FieldRef<"Job", 'DateTime'>
    readonly location: FieldRef<"Job", 'String'>
    readonly governorSerial: FieldRef<"Job", 'String'>
    readonly governorStatus: FieldRef<"Job", 'String'>
    readonly clientName: FieldRef<"Job", 'String'>
    readonly clientPhone: FieldRef<"Job", 'String'>
    readonly remarks: FieldRef<"Job", 'String'>
    readonly photoUrl: FieldRef<"Job", 'String'>
    readonly clientSignature: FieldRef<"Job", 'String'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly technicianId: FieldRef<"Job", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job updateManyAndReturn
   */
  export type JobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to delete.
     */
    limit?: number
  }

  /**
   * Job.assignedTechnician
   */
  export type Job$assignedTechnicianArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Job.photos
   */
  export type Job$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Job.history
   */
  export type Job$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    where?: JobHistoryWhereInput
    orderBy?: JobHistoryOrderByWithRelationInput | JobHistoryOrderByWithRelationInput[]
    cursor?: JobHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobHistoryScalarFieldEnum | JobHistoryScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    loginTime: Date | null
    logoutTime: Date | null
    active: boolean | null
    latitude: number | null
    longitude: number | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    loginTime: Date | null
    logoutTime: Date | null
    active: boolean | null
    latitude: number | null
    longitude: number | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    loginTime: number
    logoutTime: number
    active: number
    latitude: number
    longitude: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
    latitude?: true
    longitude?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
    latitude?: true
    longitude?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    loginTime?: true
    logoutTime?: true
    active?: true
    latitude?: true
    longitude?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    loginTime?: true
    logoutTime?: true
    active?: true
    latitude?: true
    longitude?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    loginTime?: true
    logoutTime?: true
    active?: true
    latitude?: true
    longitude?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    userId: number
    loginTime: Date
    logoutTime: Date | null
    active: boolean
    latitude: number | null
    longitude: number | null
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    loginTime?: boolean
    logoutTime?: boolean
    active?: boolean
    latitude?: boolean
    longitude?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    loginTime?: boolean
    logoutTime?: boolean
    active?: boolean
    latitude?: boolean
    longitude?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    loginTime?: boolean
    logoutTime?: boolean
    active?: boolean
    latitude?: boolean
    longitude?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    loginTime?: boolean
    logoutTime?: boolean
    active?: boolean
    latitude?: boolean
    longitude?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "loginTime" | "logoutTime" | "active" | "latitude" | "longitude", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      loginTime: Date
      logoutTime: Date | null
      active: boolean
      latitude: number | null
      longitude: number | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly userId: FieldRef<"Session", 'Int'>
    readonly loginTime: FieldRef<"Session", 'DateTime'>
    readonly logoutTime: FieldRef<"Session", 'DateTime'>
    readonly active: FieldRef<"Session", 'Boolean'>
    readonly latitude: FieldRef<"Session", 'Float'>
    readonly longitude: FieldRef<"Session", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model RollCallUser
   */

  export type AggregateRollCallUser = {
    _count: RollCallUserCountAggregateOutputType | null
    _avg: RollCallUserAvgAggregateOutputType | null
    _sum: RollCallUserSumAggregateOutputType | null
    _min: RollCallUserMinAggregateOutputType | null
    _max: RollCallUserMaxAggregateOutputType | null
  }

  export type RollCallUserAvgAggregateOutputType = {
    id: number | null
    rollCallId: number | null
    userId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type RollCallUserSumAggregateOutputType = {
    id: number | null
    rollCallId: number | null
    userId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type RollCallUserMinAggregateOutputType = {
    id: number | null
    rollCallId: number | null
    userId: number | null
    status: string | null
    checkIn: Date | null
    checkOut: Date | null
    latitude: number | null
    longitude: number | null
  }

  export type RollCallUserMaxAggregateOutputType = {
    id: number | null
    rollCallId: number | null
    userId: number | null
    status: string | null
    checkIn: Date | null
    checkOut: Date | null
    latitude: number | null
    longitude: number | null
  }

  export type RollCallUserCountAggregateOutputType = {
    id: number
    rollCallId: number
    userId: number
    status: number
    checkIn: number
    checkOut: number
    latitude: number
    longitude: number
    _all: number
  }


  export type RollCallUserAvgAggregateInputType = {
    id?: true
    rollCallId?: true
    userId?: true
    latitude?: true
    longitude?: true
  }

  export type RollCallUserSumAggregateInputType = {
    id?: true
    rollCallId?: true
    userId?: true
    latitude?: true
    longitude?: true
  }

  export type RollCallUserMinAggregateInputType = {
    id?: true
    rollCallId?: true
    userId?: true
    status?: true
    checkIn?: true
    checkOut?: true
    latitude?: true
    longitude?: true
  }

  export type RollCallUserMaxAggregateInputType = {
    id?: true
    rollCallId?: true
    userId?: true
    status?: true
    checkIn?: true
    checkOut?: true
    latitude?: true
    longitude?: true
  }

  export type RollCallUserCountAggregateInputType = {
    id?: true
    rollCallId?: true
    userId?: true
    status?: true
    checkIn?: true
    checkOut?: true
    latitude?: true
    longitude?: true
    _all?: true
  }

  export type RollCallUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RollCallUser to aggregate.
     */
    where?: RollCallUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCallUsers to fetch.
     */
    orderBy?: RollCallUserOrderByWithRelationInput | RollCallUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RollCallUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCallUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCallUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RollCallUsers
    **/
    _count?: true | RollCallUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RollCallUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RollCallUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RollCallUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RollCallUserMaxAggregateInputType
  }

  export type GetRollCallUserAggregateType<T extends RollCallUserAggregateArgs> = {
        [P in keyof T & keyof AggregateRollCallUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRollCallUser[P]>
      : GetScalarType<T[P], AggregateRollCallUser[P]>
  }




  export type RollCallUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RollCallUserWhereInput
    orderBy?: RollCallUserOrderByWithAggregationInput | RollCallUserOrderByWithAggregationInput[]
    by: RollCallUserScalarFieldEnum[] | RollCallUserScalarFieldEnum
    having?: RollCallUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RollCallUserCountAggregateInputType | true
    _avg?: RollCallUserAvgAggregateInputType
    _sum?: RollCallUserSumAggregateInputType
    _min?: RollCallUserMinAggregateInputType
    _max?: RollCallUserMaxAggregateInputType
  }

  export type RollCallUserGroupByOutputType = {
    id: number
    rollCallId: number
    userId: number
    status: string | null
    checkIn: Date | null
    checkOut: Date | null
    latitude: number | null
    longitude: number | null
    _count: RollCallUserCountAggregateOutputType | null
    _avg: RollCallUserAvgAggregateOutputType | null
    _sum: RollCallUserSumAggregateOutputType | null
    _min: RollCallUserMinAggregateOutputType | null
    _max: RollCallUserMaxAggregateOutputType | null
  }

  type GetRollCallUserGroupByPayload<T extends RollCallUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RollCallUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RollCallUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RollCallUserGroupByOutputType[P]>
            : GetScalarType<T[P], RollCallUserGroupByOutputType[P]>
        }
      >
    >


  export type RollCallUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rollCallId?: boolean
    userId?: boolean
    status?: boolean
    checkIn?: boolean
    checkOut?: boolean
    latitude?: boolean
    longitude?: boolean
    rollCall?: boolean | RollCallDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rollCallUser"]>

  export type RollCallUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rollCallId?: boolean
    userId?: boolean
    status?: boolean
    checkIn?: boolean
    checkOut?: boolean
    latitude?: boolean
    longitude?: boolean
    rollCall?: boolean | RollCallDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rollCallUser"]>

  export type RollCallUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rollCallId?: boolean
    userId?: boolean
    status?: boolean
    checkIn?: boolean
    checkOut?: boolean
    latitude?: boolean
    longitude?: boolean
    rollCall?: boolean | RollCallDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rollCallUser"]>

  export type RollCallUserSelectScalar = {
    id?: boolean
    rollCallId?: boolean
    userId?: boolean
    status?: boolean
    checkIn?: boolean
    checkOut?: boolean
    latitude?: boolean
    longitude?: boolean
  }

  export type RollCallUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rollCallId" | "userId" | "status" | "checkIn" | "checkOut" | "latitude" | "longitude", ExtArgs["result"]["rollCallUser"]>
  export type RollCallUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rollCall?: boolean | RollCallDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RollCallUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rollCall?: boolean | RollCallDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RollCallUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rollCall?: boolean | RollCallDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RollCallUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RollCallUser"
    objects: {
      rollCall: Prisma.$RollCallPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rollCallId: number
      userId: number
      status: string | null
      checkIn: Date | null
      checkOut: Date | null
      latitude: number | null
      longitude: number | null
    }, ExtArgs["result"]["rollCallUser"]>
    composites: {}
  }

  type RollCallUserGetPayload<S extends boolean | null | undefined | RollCallUserDefaultArgs> = $Result.GetResult<Prisma.$RollCallUserPayload, S>

  type RollCallUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RollCallUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RollCallUserCountAggregateInputType | true
    }

  export interface RollCallUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RollCallUser'], meta: { name: 'RollCallUser' } }
    /**
     * Find zero or one RollCallUser that matches the filter.
     * @param {RollCallUserFindUniqueArgs} args - Arguments to find a RollCallUser
     * @example
     * // Get one RollCallUser
     * const rollCallUser = await prisma.rollCallUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RollCallUserFindUniqueArgs>(args: SelectSubset<T, RollCallUserFindUniqueArgs<ExtArgs>>): Prisma__RollCallUserClient<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RollCallUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RollCallUserFindUniqueOrThrowArgs} args - Arguments to find a RollCallUser
     * @example
     * // Get one RollCallUser
     * const rollCallUser = await prisma.rollCallUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RollCallUserFindUniqueOrThrowArgs>(args: SelectSubset<T, RollCallUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RollCallUserClient<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RollCallUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUserFindFirstArgs} args - Arguments to find a RollCallUser
     * @example
     * // Get one RollCallUser
     * const rollCallUser = await prisma.rollCallUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RollCallUserFindFirstArgs>(args?: SelectSubset<T, RollCallUserFindFirstArgs<ExtArgs>>): Prisma__RollCallUserClient<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RollCallUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUserFindFirstOrThrowArgs} args - Arguments to find a RollCallUser
     * @example
     * // Get one RollCallUser
     * const rollCallUser = await prisma.rollCallUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RollCallUserFindFirstOrThrowArgs>(args?: SelectSubset<T, RollCallUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__RollCallUserClient<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RollCallUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RollCallUsers
     * const rollCallUsers = await prisma.rollCallUser.findMany()
     * 
     * // Get first 10 RollCallUsers
     * const rollCallUsers = await prisma.rollCallUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rollCallUserWithIdOnly = await prisma.rollCallUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RollCallUserFindManyArgs>(args?: SelectSubset<T, RollCallUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RollCallUser.
     * @param {RollCallUserCreateArgs} args - Arguments to create a RollCallUser.
     * @example
     * // Create one RollCallUser
     * const RollCallUser = await prisma.rollCallUser.create({
     *   data: {
     *     // ... data to create a RollCallUser
     *   }
     * })
     * 
     */
    create<T extends RollCallUserCreateArgs>(args: SelectSubset<T, RollCallUserCreateArgs<ExtArgs>>): Prisma__RollCallUserClient<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RollCallUsers.
     * @param {RollCallUserCreateManyArgs} args - Arguments to create many RollCallUsers.
     * @example
     * // Create many RollCallUsers
     * const rollCallUser = await prisma.rollCallUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RollCallUserCreateManyArgs>(args?: SelectSubset<T, RollCallUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RollCallUsers and returns the data saved in the database.
     * @param {RollCallUserCreateManyAndReturnArgs} args - Arguments to create many RollCallUsers.
     * @example
     * // Create many RollCallUsers
     * const rollCallUser = await prisma.rollCallUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RollCallUsers and only return the `id`
     * const rollCallUserWithIdOnly = await prisma.rollCallUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RollCallUserCreateManyAndReturnArgs>(args?: SelectSubset<T, RollCallUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RollCallUser.
     * @param {RollCallUserDeleteArgs} args - Arguments to delete one RollCallUser.
     * @example
     * // Delete one RollCallUser
     * const RollCallUser = await prisma.rollCallUser.delete({
     *   where: {
     *     // ... filter to delete one RollCallUser
     *   }
     * })
     * 
     */
    delete<T extends RollCallUserDeleteArgs>(args: SelectSubset<T, RollCallUserDeleteArgs<ExtArgs>>): Prisma__RollCallUserClient<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RollCallUser.
     * @param {RollCallUserUpdateArgs} args - Arguments to update one RollCallUser.
     * @example
     * // Update one RollCallUser
     * const rollCallUser = await prisma.rollCallUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RollCallUserUpdateArgs>(args: SelectSubset<T, RollCallUserUpdateArgs<ExtArgs>>): Prisma__RollCallUserClient<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RollCallUsers.
     * @param {RollCallUserDeleteManyArgs} args - Arguments to filter RollCallUsers to delete.
     * @example
     * // Delete a few RollCallUsers
     * const { count } = await prisma.rollCallUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RollCallUserDeleteManyArgs>(args?: SelectSubset<T, RollCallUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RollCallUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RollCallUsers
     * const rollCallUser = await prisma.rollCallUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RollCallUserUpdateManyArgs>(args: SelectSubset<T, RollCallUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RollCallUsers and returns the data updated in the database.
     * @param {RollCallUserUpdateManyAndReturnArgs} args - Arguments to update many RollCallUsers.
     * @example
     * // Update many RollCallUsers
     * const rollCallUser = await prisma.rollCallUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RollCallUsers and only return the `id`
     * const rollCallUserWithIdOnly = await prisma.rollCallUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RollCallUserUpdateManyAndReturnArgs>(args: SelectSubset<T, RollCallUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RollCallUser.
     * @param {RollCallUserUpsertArgs} args - Arguments to update or create a RollCallUser.
     * @example
     * // Update or create a RollCallUser
     * const rollCallUser = await prisma.rollCallUser.upsert({
     *   create: {
     *     // ... data to create a RollCallUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RollCallUser we want to update
     *   }
     * })
     */
    upsert<T extends RollCallUserUpsertArgs>(args: SelectSubset<T, RollCallUserUpsertArgs<ExtArgs>>): Prisma__RollCallUserClient<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RollCallUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUserCountArgs} args - Arguments to filter RollCallUsers to count.
     * @example
     * // Count the number of RollCallUsers
     * const count = await prisma.rollCallUser.count({
     *   where: {
     *     // ... the filter for the RollCallUsers we want to count
     *   }
     * })
    **/
    count<T extends RollCallUserCountArgs>(
      args?: Subset<T, RollCallUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RollCallUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RollCallUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RollCallUserAggregateArgs>(args: Subset<T, RollCallUserAggregateArgs>): Prisma.PrismaPromise<GetRollCallUserAggregateType<T>>

    /**
     * Group by RollCallUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RollCallUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RollCallUserGroupByArgs['orderBy'] }
        : { orderBy?: RollCallUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RollCallUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRollCallUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RollCallUser model
   */
  readonly fields: RollCallUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RollCallUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RollCallUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rollCall<T extends RollCallDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RollCallDefaultArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RollCallUser model
   */
  interface RollCallUserFieldRefs {
    readonly id: FieldRef<"RollCallUser", 'Int'>
    readonly rollCallId: FieldRef<"RollCallUser", 'Int'>
    readonly userId: FieldRef<"RollCallUser", 'Int'>
    readonly status: FieldRef<"RollCallUser", 'String'>
    readonly checkIn: FieldRef<"RollCallUser", 'DateTime'>
    readonly checkOut: FieldRef<"RollCallUser", 'DateTime'>
    readonly latitude: FieldRef<"RollCallUser", 'Float'>
    readonly longitude: FieldRef<"RollCallUser", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * RollCallUser findUnique
   */
  export type RollCallUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * Filter, which RollCallUser to fetch.
     */
    where: RollCallUserWhereUniqueInput
  }

  /**
   * RollCallUser findUniqueOrThrow
   */
  export type RollCallUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * Filter, which RollCallUser to fetch.
     */
    where: RollCallUserWhereUniqueInput
  }

  /**
   * RollCallUser findFirst
   */
  export type RollCallUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * Filter, which RollCallUser to fetch.
     */
    where?: RollCallUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCallUsers to fetch.
     */
    orderBy?: RollCallUserOrderByWithRelationInput | RollCallUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RollCallUsers.
     */
    cursor?: RollCallUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCallUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCallUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RollCallUsers.
     */
    distinct?: RollCallUserScalarFieldEnum | RollCallUserScalarFieldEnum[]
  }

  /**
   * RollCallUser findFirstOrThrow
   */
  export type RollCallUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * Filter, which RollCallUser to fetch.
     */
    where?: RollCallUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCallUsers to fetch.
     */
    orderBy?: RollCallUserOrderByWithRelationInput | RollCallUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RollCallUsers.
     */
    cursor?: RollCallUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCallUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCallUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RollCallUsers.
     */
    distinct?: RollCallUserScalarFieldEnum | RollCallUserScalarFieldEnum[]
  }

  /**
   * RollCallUser findMany
   */
  export type RollCallUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * Filter, which RollCallUsers to fetch.
     */
    where?: RollCallUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCallUsers to fetch.
     */
    orderBy?: RollCallUserOrderByWithRelationInput | RollCallUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RollCallUsers.
     */
    cursor?: RollCallUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCallUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCallUsers.
     */
    skip?: number
    distinct?: RollCallUserScalarFieldEnum | RollCallUserScalarFieldEnum[]
  }

  /**
   * RollCallUser create
   */
  export type RollCallUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * The data needed to create a RollCallUser.
     */
    data: XOR<RollCallUserCreateInput, RollCallUserUncheckedCreateInput>
  }

  /**
   * RollCallUser createMany
   */
  export type RollCallUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RollCallUsers.
     */
    data: RollCallUserCreateManyInput | RollCallUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RollCallUser createManyAndReturn
   */
  export type RollCallUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * The data used to create many RollCallUsers.
     */
    data: RollCallUserCreateManyInput | RollCallUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RollCallUser update
   */
  export type RollCallUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * The data needed to update a RollCallUser.
     */
    data: XOR<RollCallUserUpdateInput, RollCallUserUncheckedUpdateInput>
    /**
     * Choose, which RollCallUser to update.
     */
    where: RollCallUserWhereUniqueInput
  }

  /**
   * RollCallUser updateMany
   */
  export type RollCallUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RollCallUsers.
     */
    data: XOR<RollCallUserUpdateManyMutationInput, RollCallUserUncheckedUpdateManyInput>
    /**
     * Filter which RollCallUsers to update
     */
    where?: RollCallUserWhereInput
    /**
     * Limit how many RollCallUsers to update.
     */
    limit?: number
  }

  /**
   * RollCallUser updateManyAndReturn
   */
  export type RollCallUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * The data used to update RollCallUsers.
     */
    data: XOR<RollCallUserUpdateManyMutationInput, RollCallUserUncheckedUpdateManyInput>
    /**
     * Filter which RollCallUsers to update
     */
    where?: RollCallUserWhereInput
    /**
     * Limit how many RollCallUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RollCallUser upsert
   */
  export type RollCallUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * The filter to search for the RollCallUser to update in case it exists.
     */
    where: RollCallUserWhereUniqueInput
    /**
     * In case the RollCallUser found by the `where` argument doesn't exist, create a new RollCallUser with this data.
     */
    create: XOR<RollCallUserCreateInput, RollCallUserUncheckedCreateInput>
    /**
     * In case the RollCallUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RollCallUserUpdateInput, RollCallUserUncheckedUpdateInput>
  }

  /**
   * RollCallUser delete
   */
  export type RollCallUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    /**
     * Filter which RollCallUser to delete.
     */
    where: RollCallUserWhereUniqueInput
  }

  /**
   * RollCallUser deleteMany
   */
  export type RollCallUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RollCallUsers to delete
     */
    where?: RollCallUserWhereInput
    /**
     * Limit how many RollCallUsers to delete.
     */
    limit?: number
  }

  /**
   * RollCallUser without action
   */
  export type RollCallUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
  }


  /**
   * Model RollCall
   */

  export type AggregateRollCall = {
    _count: RollCallCountAggregateOutputType | null
    _avg: RollCallAvgAggregateOutputType | null
    _sum: RollCallSumAggregateOutputType | null
    _min: RollCallMinAggregateOutputType | null
    _max: RollCallMaxAggregateOutputType | null
  }

  export type RollCallAvgAggregateOutputType = {
    id: number | null
  }

  export type RollCallSumAggregateOutputType = {
    id: number | null
  }

  export type RollCallMinAggregateOutputType = {
    id: number | null
    date: Date | null
    region: string | null
  }

  export type RollCallMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    region: string | null
  }

  export type RollCallCountAggregateOutputType = {
    id: number
    date: number
    region: number
    _all: number
  }


  export type RollCallAvgAggregateInputType = {
    id?: true
  }

  export type RollCallSumAggregateInputType = {
    id?: true
  }

  export type RollCallMinAggregateInputType = {
    id?: true
    date?: true
    region?: true
  }

  export type RollCallMaxAggregateInputType = {
    id?: true
    date?: true
    region?: true
  }

  export type RollCallCountAggregateInputType = {
    id?: true
    date?: true
    region?: true
    _all?: true
  }

  export type RollCallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RollCall to aggregate.
     */
    where?: RollCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCalls to fetch.
     */
    orderBy?: RollCallOrderByWithRelationInput | RollCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RollCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RollCalls
    **/
    _count?: true | RollCallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RollCallAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RollCallSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RollCallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RollCallMaxAggregateInputType
  }

  export type GetRollCallAggregateType<T extends RollCallAggregateArgs> = {
        [P in keyof T & keyof AggregateRollCall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRollCall[P]>
      : GetScalarType<T[P], AggregateRollCall[P]>
  }




  export type RollCallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RollCallWhereInput
    orderBy?: RollCallOrderByWithAggregationInput | RollCallOrderByWithAggregationInput[]
    by: RollCallScalarFieldEnum[] | RollCallScalarFieldEnum
    having?: RollCallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RollCallCountAggregateInputType | true
    _avg?: RollCallAvgAggregateInputType
    _sum?: RollCallSumAggregateInputType
    _min?: RollCallMinAggregateInputType
    _max?: RollCallMaxAggregateInputType
  }

  export type RollCallGroupByOutputType = {
    id: number
    date: Date
    region: string | null
    _count: RollCallCountAggregateOutputType | null
    _avg: RollCallAvgAggregateOutputType | null
    _sum: RollCallSumAggregateOutputType | null
    _min: RollCallMinAggregateOutputType | null
    _max: RollCallMaxAggregateOutputType | null
  }

  type GetRollCallGroupByPayload<T extends RollCallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RollCallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RollCallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RollCallGroupByOutputType[P]>
            : GetScalarType<T[P], RollCallGroupByOutputType[P]>
        }
      >
    >


  export type RollCallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    region?: boolean
    presentUsers?: boolean | RollCall$presentUsersArgs<ExtArgs>
    _count?: boolean | RollCallCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rollCall"]>

  export type RollCallSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    region?: boolean
  }, ExtArgs["result"]["rollCall"]>

  export type RollCallSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    region?: boolean
  }, ExtArgs["result"]["rollCall"]>

  export type RollCallSelectScalar = {
    id?: boolean
    date?: boolean
    region?: boolean
  }

  export type RollCallOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "region", ExtArgs["result"]["rollCall"]>
  export type RollCallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presentUsers?: boolean | RollCall$presentUsersArgs<ExtArgs>
    _count?: boolean | RollCallCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RollCallIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RollCallIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RollCallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RollCall"
    objects: {
      presentUsers: Prisma.$RollCallUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      region: string | null
    }, ExtArgs["result"]["rollCall"]>
    composites: {}
  }

  type RollCallGetPayload<S extends boolean | null | undefined | RollCallDefaultArgs> = $Result.GetResult<Prisma.$RollCallPayload, S>

  type RollCallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RollCallFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RollCallCountAggregateInputType | true
    }

  export interface RollCallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RollCall'], meta: { name: 'RollCall' } }
    /**
     * Find zero or one RollCall that matches the filter.
     * @param {RollCallFindUniqueArgs} args - Arguments to find a RollCall
     * @example
     * // Get one RollCall
     * const rollCall = await prisma.rollCall.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RollCallFindUniqueArgs>(args: SelectSubset<T, RollCallFindUniqueArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RollCall that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RollCallFindUniqueOrThrowArgs} args - Arguments to find a RollCall
     * @example
     * // Get one RollCall
     * const rollCall = await prisma.rollCall.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RollCallFindUniqueOrThrowArgs>(args: SelectSubset<T, RollCallFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RollCall that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallFindFirstArgs} args - Arguments to find a RollCall
     * @example
     * // Get one RollCall
     * const rollCall = await prisma.rollCall.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RollCallFindFirstArgs>(args?: SelectSubset<T, RollCallFindFirstArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RollCall that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallFindFirstOrThrowArgs} args - Arguments to find a RollCall
     * @example
     * // Get one RollCall
     * const rollCall = await prisma.rollCall.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RollCallFindFirstOrThrowArgs>(args?: SelectSubset<T, RollCallFindFirstOrThrowArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RollCalls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RollCalls
     * const rollCalls = await prisma.rollCall.findMany()
     * 
     * // Get first 10 RollCalls
     * const rollCalls = await prisma.rollCall.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rollCallWithIdOnly = await prisma.rollCall.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RollCallFindManyArgs>(args?: SelectSubset<T, RollCallFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RollCall.
     * @param {RollCallCreateArgs} args - Arguments to create a RollCall.
     * @example
     * // Create one RollCall
     * const RollCall = await prisma.rollCall.create({
     *   data: {
     *     // ... data to create a RollCall
     *   }
     * })
     * 
     */
    create<T extends RollCallCreateArgs>(args: SelectSubset<T, RollCallCreateArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RollCalls.
     * @param {RollCallCreateManyArgs} args - Arguments to create many RollCalls.
     * @example
     * // Create many RollCalls
     * const rollCall = await prisma.rollCall.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RollCallCreateManyArgs>(args?: SelectSubset<T, RollCallCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RollCalls and returns the data saved in the database.
     * @param {RollCallCreateManyAndReturnArgs} args - Arguments to create many RollCalls.
     * @example
     * // Create many RollCalls
     * const rollCall = await prisma.rollCall.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RollCalls and only return the `id`
     * const rollCallWithIdOnly = await prisma.rollCall.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RollCallCreateManyAndReturnArgs>(args?: SelectSubset<T, RollCallCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RollCall.
     * @param {RollCallDeleteArgs} args - Arguments to delete one RollCall.
     * @example
     * // Delete one RollCall
     * const RollCall = await prisma.rollCall.delete({
     *   where: {
     *     // ... filter to delete one RollCall
     *   }
     * })
     * 
     */
    delete<T extends RollCallDeleteArgs>(args: SelectSubset<T, RollCallDeleteArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RollCall.
     * @param {RollCallUpdateArgs} args - Arguments to update one RollCall.
     * @example
     * // Update one RollCall
     * const rollCall = await prisma.rollCall.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RollCallUpdateArgs>(args: SelectSubset<T, RollCallUpdateArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RollCalls.
     * @param {RollCallDeleteManyArgs} args - Arguments to filter RollCalls to delete.
     * @example
     * // Delete a few RollCalls
     * const { count } = await prisma.rollCall.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RollCallDeleteManyArgs>(args?: SelectSubset<T, RollCallDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RollCalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RollCalls
     * const rollCall = await prisma.rollCall.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RollCallUpdateManyArgs>(args: SelectSubset<T, RollCallUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RollCalls and returns the data updated in the database.
     * @param {RollCallUpdateManyAndReturnArgs} args - Arguments to update many RollCalls.
     * @example
     * // Update many RollCalls
     * const rollCall = await prisma.rollCall.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RollCalls and only return the `id`
     * const rollCallWithIdOnly = await prisma.rollCall.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RollCallUpdateManyAndReturnArgs>(args: SelectSubset<T, RollCallUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RollCall.
     * @param {RollCallUpsertArgs} args - Arguments to update or create a RollCall.
     * @example
     * // Update or create a RollCall
     * const rollCall = await prisma.rollCall.upsert({
     *   create: {
     *     // ... data to create a RollCall
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RollCall we want to update
     *   }
     * })
     */
    upsert<T extends RollCallUpsertArgs>(args: SelectSubset<T, RollCallUpsertArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RollCalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallCountArgs} args - Arguments to filter RollCalls to count.
     * @example
     * // Count the number of RollCalls
     * const count = await prisma.rollCall.count({
     *   where: {
     *     // ... the filter for the RollCalls we want to count
     *   }
     * })
    **/
    count<T extends RollCallCountArgs>(
      args?: Subset<T, RollCallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RollCallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RollCall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RollCallAggregateArgs>(args: Subset<T, RollCallAggregateArgs>): Prisma.PrismaPromise<GetRollCallAggregateType<T>>

    /**
     * Group by RollCall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RollCallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RollCallGroupByArgs['orderBy'] }
        : { orderBy?: RollCallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RollCallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRollCallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RollCall model
   */
  readonly fields: RollCallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RollCall.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RollCallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    presentUsers<T extends RollCall$presentUsersArgs<ExtArgs> = {}>(args?: Subset<T, RollCall$presentUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RollCall model
   */
  interface RollCallFieldRefs {
    readonly id: FieldRef<"RollCall", 'Int'>
    readonly date: FieldRef<"RollCall", 'DateTime'>
    readonly region: FieldRef<"RollCall", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RollCall findUnique
   */
  export type RollCallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCall to fetch.
     */
    where: RollCallWhereUniqueInput
  }

  /**
   * RollCall findUniqueOrThrow
   */
  export type RollCallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCall to fetch.
     */
    where: RollCallWhereUniqueInput
  }

  /**
   * RollCall findFirst
   */
  export type RollCallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCall to fetch.
     */
    where?: RollCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCalls to fetch.
     */
    orderBy?: RollCallOrderByWithRelationInput | RollCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RollCalls.
     */
    cursor?: RollCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RollCalls.
     */
    distinct?: RollCallScalarFieldEnum | RollCallScalarFieldEnum[]
  }

  /**
   * RollCall findFirstOrThrow
   */
  export type RollCallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCall to fetch.
     */
    where?: RollCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCalls to fetch.
     */
    orderBy?: RollCallOrderByWithRelationInput | RollCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RollCalls.
     */
    cursor?: RollCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RollCalls.
     */
    distinct?: RollCallScalarFieldEnum | RollCallScalarFieldEnum[]
  }

  /**
   * RollCall findMany
   */
  export type RollCallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCalls to fetch.
     */
    where?: RollCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCalls to fetch.
     */
    orderBy?: RollCallOrderByWithRelationInput | RollCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RollCalls.
     */
    cursor?: RollCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCalls.
     */
    skip?: number
    distinct?: RollCallScalarFieldEnum | RollCallScalarFieldEnum[]
  }

  /**
   * RollCall create
   */
  export type RollCallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * The data needed to create a RollCall.
     */
    data?: XOR<RollCallCreateInput, RollCallUncheckedCreateInput>
  }

  /**
   * RollCall createMany
   */
  export type RollCallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RollCalls.
     */
    data: RollCallCreateManyInput | RollCallCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RollCall createManyAndReturn
   */
  export type RollCallCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * The data used to create many RollCalls.
     */
    data: RollCallCreateManyInput | RollCallCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RollCall update
   */
  export type RollCallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * The data needed to update a RollCall.
     */
    data: XOR<RollCallUpdateInput, RollCallUncheckedUpdateInput>
    /**
     * Choose, which RollCall to update.
     */
    where: RollCallWhereUniqueInput
  }

  /**
   * RollCall updateMany
   */
  export type RollCallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RollCalls.
     */
    data: XOR<RollCallUpdateManyMutationInput, RollCallUncheckedUpdateManyInput>
    /**
     * Filter which RollCalls to update
     */
    where?: RollCallWhereInput
    /**
     * Limit how many RollCalls to update.
     */
    limit?: number
  }

  /**
   * RollCall updateManyAndReturn
   */
  export type RollCallUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * The data used to update RollCalls.
     */
    data: XOR<RollCallUpdateManyMutationInput, RollCallUncheckedUpdateManyInput>
    /**
     * Filter which RollCalls to update
     */
    where?: RollCallWhereInput
    /**
     * Limit how many RollCalls to update.
     */
    limit?: number
  }

  /**
   * RollCall upsert
   */
  export type RollCallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * The filter to search for the RollCall to update in case it exists.
     */
    where: RollCallWhereUniqueInput
    /**
     * In case the RollCall found by the `where` argument doesn't exist, create a new RollCall with this data.
     */
    create: XOR<RollCallCreateInput, RollCallUncheckedCreateInput>
    /**
     * In case the RollCall was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RollCallUpdateInput, RollCallUncheckedUpdateInput>
  }

  /**
   * RollCall delete
   */
  export type RollCallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter which RollCall to delete.
     */
    where: RollCallWhereUniqueInput
  }

  /**
   * RollCall deleteMany
   */
  export type RollCallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RollCalls to delete
     */
    where?: RollCallWhereInput
    /**
     * Limit how many RollCalls to delete.
     */
    limit?: number
  }

  /**
   * RollCall.presentUsers
   */
  export type RollCall$presentUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallUser
     */
    select?: RollCallUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCallUser
     */
    omit?: RollCallUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallUserInclude<ExtArgs> | null
    where?: RollCallUserWhereInput
    orderBy?: RollCallUserOrderByWithRelationInput | RollCallUserOrderByWithRelationInput[]
    cursor?: RollCallUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RollCallUserScalarFieldEnum | RollCallUserScalarFieldEnum[]
  }

  /**
   * RollCall without action
   */
  export type RollCallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
  }


  /**
   * Model Photo
   */

  export type AggregatePhoto = {
    _count: PhotoCountAggregateOutputType | null
    _avg: PhotoAvgAggregateOutputType | null
    _sum: PhotoSumAggregateOutputType | null
    _min: PhotoMinAggregateOutputType | null
    _max: PhotoMaxAggregateOutputType | null
  }

  export type PhotoAvgAggregateOutputType = {
    id: number | null
    jobId: number | null
  }

  export type PhotoSumAggregateOutputType = {
    id: number | null
    jobId: number | null
  }

  export type PhotoMinAggregateOutputType = {
    id: number | null
    jobId: number | null
    url: string | null
    uploadedAt: Date | null
  }

  export type PhotoMaxAggregateOutputType = {
    id: number | null
    jobId: number | null
    url: string | null
    uploadedAt: Date | null
  }

  export type PhotoCountAggregateOutputType = {
    id: number
    jobId: number
    url: number
    uploadedAt: number
    _all: number
  }


  export type PhotoAvgAggregateInputType = {
    id?: true
    jobId?: true
  }

  export type PhotoSumAggregateInputType = {
    id?: true
    jobId?: true
  }

  export type PhotoMinAggregateInputType = {
    id?: true
    jobId?: true
    url?: true
    uploadedAt?: true
  }

  export type PhotoMaxAggregateInputType = {
    id?: true
    jobId?: true
    url?: true
    uploadedAt?: true
  }

  export type PhotoCountAggregateInputType = {
    id?: true
    jobId?: true
    url?: true
    uploadedAt?: true
    _all?: true
  }

  export type PhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Photo to aggregate.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Photos
    **/
    _count?: true | PhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhotoMaxAggregateInputType
  }

  export type GetPhotoAggregateType<T extends PhotoAggregateArgs> = {
        [P in keyof T & keyof AggregatePhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhoto[P]>
      : GetScalarType<T[P], AggregatePhoto[P]>
  }




  export type PhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithAggregationInput | PhotoOrderByWithAggregationInput[]
    by: PhotoScalarFieldEnum[] | PhotoScalarFieldEnum
    having?: PhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhotoCountAggregateInputType | true
    _avg?: PhotoAvgAggregateInputType
    _sum?: PhotoSumAggregateInputType
    _min?: PhotoMinAggregateInputType
    _max?: PhotoMaxAggregateInputType
  }

  export type PhotoGroupByOutputType = {
    id: number
    jobId: number
    url: string
    uploadedAt: Date
    _count: PhotoCountAggregateOutputType | null
    _avg: PhotoAvgAggregateOutputType | null
    _sum: PhotoSumAggregateOutputType | null
    _min: PhotoMinAggregateOutputType | null
    _max: PhotoMaxAggregateOutputType | null
  }

  type GetPhotoGroupByPayload<T extends PhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhotoGroupByOutputType[P]>
            : GetScalarType<T[P], PhotoGroupByOutputType[P]>
        }
      >
    >


  export type PhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    url?: boolean
    uploadedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photo"]>

  export type PhotoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    url?: boolean
    uploadedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photo"]>

  export type PhotoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    url?: boolean
    uploadedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photo"]>

  export type PhotoSelectScalar = {
    id?: boolean
    jobId?: boolean
    url?: boolean
    uploadedAt?: boolean
  }

  export type PhotoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "url" | "uploadedAt", ExtArgs["result"]["photo"]>
  export type PhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type PhotoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type PhotoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $PhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Photo"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobId: number
      url: string
      uploadedAt: Date
    }, ExtArgs["result"]["photo"]>
    composites: {}
  }

  type PhotoGetPayload<S extends boolean | null | undefined | PhotoDefaultArgs> = $Result.GetResult<Prisma.$PhotoPayload, S>

  type PhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PhotoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PhotoCountAggregateInputType | true
    }

  export interface PhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Photo'], meta: { name: 'Photo' } }
    /**
     * Find zero or one Photo that matches the filter.
     * @param {PhotoFindUniqueArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhotoFindUniqueArgs>(args: SelectSubset<T, PhotoFindUniqueArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Photo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PhotoFindUniqueOrThrowArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhotoFindUniqueOrThrowArgs>(args: SelectSubset<T, PhotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Photo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindFirstArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhotoFindFirstArgs>(args?: SelectSubset<T, PhotoFindFirstArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Photo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindFirstOrThrowArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhotoFindFirstOrThrowArgs>(args?: SelectSubset<T, PhotoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photos
     * const photos = await prisma.photo.findMany()
     * 
     * // Get first 10 Photos
     * const photos = await prisma.photo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photoWithIdOnly = await prisma.photo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhotoFindManyArgs>(args?: SelectSubset<T, PhotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Photo.
     * @param {PhotoCreateArgs} args - Arguments to create a Photo.
     * @example
     * // Create one Photo
     * const Photo = await prisma.photo.create({
     *   data: {
     *     // ... data to create a Photo
     *   }
     * })
     * 
     */
    create<T extends PhotoCreateArgs>(args: SelectSubset<T, PhotoCreateArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Photos.
     * @param {PhotoCreateManyArgs} args - Arguments to create many Photos.
     * @example
     * // Create many Photos
     * const photo = await prisma.photo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhotoCreateManyArgs>(args?: SelectSubset<T, PhotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Photos and returns the data saved in the database.
     * @param {PhotoCreateManyAndReturnArgs} args - Arguments to create many Photos.
     * @example
     * // Create many Photos
     * const photo = await prisma.photo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Photos and only return the `id`
     * const photoWithIdOnly = await prisma.photo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhotoCreateManyAndReturnArgs>(args?: SelectSubset<T, PhotoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Photo.
     * @param {PhotoDeleteArgs} args - Arguments to delete one Photo.
     * @example
     * // Delete one Photo
     * const Photo = await prisma.photo.delete({
     *   where: {
     *     // ... filter to delete one Photo
     *   }
     * })
     * 
     */
    delete<T extends PhotoDeleteArgs>(args: SelectSubset<T, PhotoDeleteArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Photo.
     * @param {PhotoUpdateArgs} args - Arguments to update one Photo.
     * @example
     * // Update one Photo
     * const photo = await prisma.photo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhotoUpdateArgs>(args: SelectSubset<T, PhotoUpdateArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Photos.
     * @param {PhotoDeleteManyArgs} args - Arguments to filter Photos to delete.
     * @example
     * // Delete a few Photos
     * const { count } = await prisma.photo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhotoDeleteManyArgs>(args?: SelectSubset<T, PhotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photos
     * const photo = await prisma.photo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhotoUpdateManyArgs>(args: SelectSubset<T, PhotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Photos and returns the data updated in the database.
     * @param {PhotoUpdateManyAndReturnArgs} args - Arguments to update many Photos.
     * @example
     * // Update many Photos
     * const photo = await prisma.photo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Photos and only return the `id`
     * const photoWithIdOnly = await prisma.photo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PhotoUpdateManyAndReturnArgs>(args: SelectSubset<T, PhotoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Photo.
     * @param {PhotoUpsertArgs} args - Arguments to update or create a Photo.
     * @example
     * // Update or create a Photo
     * const photo = await prisma.photo.upsert({
     *   create: {
     *     // ... data to create a Photo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photo we want to update
     *   }
     * })
     */
    upsert<T extends PhotoUpsertArgs>(args: SelectSubset<T, PhotoUpsertArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoCountArgs} args - Arguments to filter Photos to count.
     * @example
     * // Count the number of Photos
     * const count = await prisma.photo.count({
     *   where: {
     *     // ... the filter for the Photos we want to count
     *   }
     * })
    **/
    count<T extends PhotoCountArgs>(
      args?: Subset<T, PhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Photo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhotoAggregateArgs>(args: Subset<T, PhotoAggregateArgs>): Prisma.PrismaPromise<GetPhotoAggregateType<T>>

    /**
     * Group by Photo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhotoGroupByArgs['orderBy'] }
        : { orderBy?: PhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Photo model
   */
  readonly fields: PhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Photo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Photo model
   */
  interface PhotoFieldRefs {
    readonly id: FieldRef<"Photo", 'Int'>
    readonly jobId: FieldRef<"Photo", 'Int'>
    readonly url: FieldRef<"Photo", 'String'>
    readonly uploadedAt: FieldRef<"Photo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Photo findUnique
   */
  export type PhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where: PhotoWhereUniqueInput
  }

  /**
   * Photo findUniqueOrThrow
   */
  export type PhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where: PhotoWhereUniqueInput
  }

  /**
   * Photo findFirst
   */
  export type PhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Photos.
     */
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Photo findFirstOrThrow
   */
  export type PhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Photos.
     */
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Photo findMany
   */
  export type PhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photos to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Photo create
   */
  export type PhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a Photo.
     */
    data: XOR<PhotoCreateInput, PhotoUncheckedCreateInput>
  }

  /**
   * Photo createMany
   */
  export type PhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Photos.
     */
    data: PhotoCreateManyInput | PhotoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Photo createManyAndReturn
   */
  export type PhotoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * The data used to create many Photos.
     */
    data: PhotoCreateManyInput | PhotoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Photo update
   */
  export type PhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a Photo.
     */
    data: XOR<PhotoUpdateInput, PhotoUncheckedUpdateInput>
    /**
     * Choose, which Photo to update.
     */
    where: PhotoWhereUniqueInput
  }

  /**
   * Photo updateMany
   */
  export type PhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Photos.
     */
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyInput>
    /**
     * Filter which Photos to update
     */
    where?: PhotoWhereInput
    /**
     * Limit how many Photos to update.
     */
    limit?: number
  }

  /**
   * Photo updateManyAndReturn
   */
  export type PhotoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * The data used to update Photos.
     */
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyInput>
    /**
     * Filter which Photos to update
     */
    where?: PhotoWhereInput
    /**
     * Limit how many Photos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Photo upsert
   */
  export type PhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the Photo to update in case it exists.
     */
    where: PhotoWhereUniqueInput
    /**
     * In case the Photo found by the `where` argument doesn't exist, create a new Photo with this data.
     */
    create: XOR<PhotoCreateInput, PhotoUncheckedCreateInput>
    /**
     * In case the Photo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhotoUpdateInput, PhotoUncheckedUpdateInput>
  }

  /**
   * Photo delete
   */
  export type PhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter which Photo to delete.
     */
    where: PhotoWhereUniqueInput
  }

  /**
   * Photo deleteMany
   */
  export type PhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Photos to delete
     */
    where?: PhotoWhereInput
    /**
     * Limit how many Photos to delete.
     */
    limit?: number
  }

  /**
   * Photo without action
   */
  export type PhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Photo
     */
    omit?: PhotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
  }


  /**
   * Model JobHistory
   */

  export type AggregateJobHistory = {
    _count: JobHistoryCountAggregateOutputType | null
    _avg: JobHistoryAvgAggregateOutputType | null
    _sum: JobHistorySumAggregateOutputType | null
    _min: JobHistoryMinAggregateOutputType | null
    _max: JobHistoryMaxAggregateOutputType | null
  }

  export type JobHistoryAvgAggregateOutputType = {
    id: number | null
    jobId: number | null
    latitude: number | null
    longitude: number | null
    updatedBy: number | null
  }

  export type JobHistorySumAggregateOutputType = {
    id: number | null
    jobId: number | null
    latitude: number | null
    longitude: number | null
    updatedBy: number | null
  }

  export type JobHistoryMinAggregateOutputType = {
    id: number | null
    jobId: number | null
    status: $Enums.JobStatus | null
    remarks: string | null
    latitude: number | null
    longitude: number | null
    updatedBy: number | null
    createdAt: Date | null
  }

  export type JobHistoryMaxAggregateOutputType = {
    id: number | null
    jobId: number | null
    status: $Enums.JobStatus | null
    remarks: string | null
    latitude: number | null
    longitude: number | null
    updatedBy: number | null
    createdAt: Date | null
  }

  export type JobHistoryCountAggregateOutputType = {
    id: number
    jobId: number
    status: number
    remarks: number
    latitude: number
    longitude: number
    updatedBy: number
    createdAt: number
    _all: number
  }


  export type JobHistoryAvgAggregateInputType = {
    id?: true
    jobId?: true
    latitude?: true
    longitude?: true
    updatedBy?: true
  }

  export type JobHistorySumAggregateInputType = {
    id?: true
    jobId?: true
    latitude?: true
    longitude?: true
    updatedBy?: true
  }

  export type JobHistoryMinAggregateInputType = {
    id?: true
    jobId?: true
    status?: true
    remarks?: true
    latitude?: true
    longitude?: true
    updatedBy?: true
    createdAt?: true
  }

  export type JobHistoryMaxAggregateInputType = {
    id?: true
    jobId?: true
    status?: true
    remarks?: true
    latitude?: true
    longitude?: true
    updatedBy?: true
    createdAt?: true
  }

  export type JobHistoryCountAggregateInputType = {
    id?: true
    jobId?: true
    status?: true
    remarks?: true
    latitude?: true
    longitude?: true
    updatedBy?: true
    createdAt?: true
    _all?: true
  }

  export type JobHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobHistory to aggregate.
     */
    where?: JobHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobHistories to fetch.
     */
    orderBy?: JobHistoryOrderByWithRelationInput | JobHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobHistories
    **/
    _count?: true | JobHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobHistoryMaxAggregateInputType
  }

  export type GetJobHistoryAggregateType<T extends JobHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateJobHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobHistory[P]>
      : GetScalarType<T[P], AggregateJobHistory[P]>
  }




  export type JobHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobHistoryWhereInput
    orderBy?: JobHistoryOrderByWithAggregationInput | JobHistoryOrderByWithAggregationInput[]
    by: JobHistoryScalarFieldEnum[] | JobHistoryScalarFieldEnum
    having?: JobHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobHistoryCountAggregateInputType | true
    _avg?: JobHistoryAvgAggregateInputType
    _sum?: JobHistorySumAggregateInputType
    _min?: JobHistoryMinAggregateInputType
    _max?: JobHistoryMaxAggregateInputType
  }

  export type JobHistoryGroupByOutputType = {
    id: number
    jobId: number
    status: $Enums.JobStatus
    remarks: string | null
    latitude: number | null
    longitude: number | null
    updatedBy: number
    createdAt: Date
    _count: JobHistoryCountAggregateOutputType | null
    _avg: JobHistoryAvgAggregateOutputType | null
    _sum: JobHistorySumAggregateOutputType | null
    _min: JobHistoryMinAggregateOutputType | null
    _max: JobHistoryMaxAggregateOutputType | null
  }

  type GetJobHistoryGroupByPayload<T extends JobHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], JobHistoryGroupByOutputType[P]>
        }
      >
    >


  export type JobHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    status?: boolean
    remarks?: boolean
    latitude?: boolean
    longitude?: boolean
    updatedBy?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobHistory"]>

  export type JobHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    status?: boolean
    remarks?: boolean
    latitude?: boolean
    longitude?: boolean
    updatedBy?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobHistory"]>

  export type JobHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    status?: boolean
    remarks?: boolean
    latitude?: boolean
    longitude?: boolean
    updatedBy?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobHistory"]>

  export type JobHistorySelectScalar = {
    id?: boolean
    jobId?: boolean
    status?: boolean
    remarks?: boolean
    latitude?: boolean
    longitude?: boolean
    updatedBy?: boolean
    createdAt?: boolean
  }

  export type JobHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "status" | "remarks" | "latitude" | "longitude" | "updatedBy" | "createdAt", ExtArgs["result"]["jobHistory"]>
  export type JobHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type JobHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type JobHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $JobHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobHistory"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobId: number
      status: $Enums.JobStatus
      remarks: string | null
      latitude: number | null
      longitude: number | null
      updatedBy: number
      createdAt: Date
    }, ExtArgs["result"]["jobHistory"]>
    composites: {}
  }

  type JobHistoryGetPayload<S extends boolean | null | undefined | JobHistoryDefaultArgs> = $Result.GetResult<Prisma.$JobHistoryPayload, S>

  type JobHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobHistoryCountAggregateInputType | true
    }

  export interface JobHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobHistory'], meta: { name: 'JobHistory' } }
    /**
     * Find zero or one JobHistory that matches the filter.
     * @param {JobHistoryFindUniqueArgs} args - Arguments to find a JobHistory
     * @example
     * // Get one JobHistory
     * const jobHistory = await prisma.jobHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobHistoryFindUniqueArgs>(args: SelectSubset<T, JobHistoryFindUniqueArgs<ExtArgs>>): Prisma__JobHistoryClient<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobHistoryFindUniqueOrThrowArgs} args - Arguments to find a JobHistory
     * @example
     * // Get one JobHistory
     * const jobHistory = await prisma.jobHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, JobHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobHistoryClient<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHistoryFindFirstArgs} args - Arguments to find a JobHistory
     * @example
     * // Get one JobHistory
     * const jobHistory = await prisma.jobHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobHistoryFindFirstArgs>(args?: SelectSubset<T, JobHistoryFindFirstArgs<ExtArgs>>): Prisma__JobHistoryClient<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHistoryFindFirstOrThrowArgs} args - Arguments to find a JobHistory
     * @example
     * // Get one JobHistory
     * const jobHistory = await prisma.jobHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, JobHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobHistoryClient<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobHistories
     * const jobHistories = await prisma.jobHistory.findMany()
     * 
     * // Get first 10 JobHistories
     * const jobHistories = await prisma.jobHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobHistoryWithIdOnly = await prisma.jobHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobHistoryFindManyArgs>(args?: SelectSubset<T, JobHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobHistory.
     * @param {JobHistoryCreateArgs} args - Arguments to create a JobHistory.
     * @example
     * // Create one JobHistory
     * const JobHistory = await prisma.jobHistory.create({
     *   data: {
     *     // ... data to create a JobHistory
     *   }
     * })
     * 
     */
    create<T extends JobHistoryCreateArgs>(args: SelectSubset<T, JobHistoryCreateArgs<ExtArgs>>): Prisma__JobHistoryClient<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobHistories.
     * @param {JobHistoryCreateManyArgs} args - Arguments to create many JobHistories.
     * @example
     * // Create many JobHistories
     * const jobHistory = await prisma.jobHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobHistoryCreateManyArgs>(args?: SelectSubset<T, JobHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobHistories and returns the data saved in the database.
     * @param {JobHistoryCreateManyAndReturnArgs} args - Arguments to create many JobHistories.
     * @example
     * // Create many JobHistories
     * const jobHistory = await prisma.jobHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobHistories and only return the `id`
     * const jobHistoryWithIdOnly = await prisma.jobHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, JobHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobHistory.
     * @param {JobHistoryDeleteArgs} args - Arguments to delete one JobHistory.
     * @example
     * // Delete one JobHistory
     * const JobHistory = await prisma.jobHistory.delete({
     *   where: {
     *     // ... filter to delete one JobHistory
     *   }
     * })
     * 
     */
    delete<T extends JobHistoryDeleteArgs>(args: SelectSubset<T, JobHistoryDeleteArgs<ExtArgs>>): Prisma__JobHistoryClient<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobHistory.
     * @param {JobHistoryUpdateArgs} args - Arguments to update one JobHistory.
     * @example
     * // Update one JobHistory
     * const jobHistory = await prisma.jobHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobHistoryUpdateArgs>(args: SelectSubset<T, JobHistoryUpdateArgs<ExtArgs>>): Prisma__JobHistoryClient<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobHistories.
     * @param {JobHistoryDeleteManyArgs} args - Arguments to filter JobHistories to delete.
     * @example
     * // Delete a few JobHistories
     * const { count } = await prisma.jobHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobHistoryDeleteManyArgs>(args?: SelectSubset<T, JobHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobHistories
     * const jobHistory = await prisma.jobHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobHistoryUpdateManyArgs>(args: SelectSubset<T, JobHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobHistories and returns the data updated in the database.
     * @param {JobHistoryUpdateManyAndReturnArgs} args - Arguments to update many JobHistories.
     * @example
     * // Update many JobHistories
     * const jobHistory = await prisma.jobHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobHistories and only return the `id`
     * const jobHistoryWithIdOnly = await prisma.jobHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, JobHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobHistory.
     * @param {JobHistoryUpsertArgs} args - Arguments to update or create a JobHistory.
     * @example
     * // Update or create a JobHistory
     * const jobHistory = await prisma.jobHistory.upsert({
     *   create: {
     *     // ... data to create a JobHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobHistory we want to update
     *   }
     * })
     */
    upsert<T extends JobHistoryUpsertArgs>(args: SelectSubset<T, JobHistoryUpsertArgs<ExtArgs>>): Prisma__JobHistoryClient<$Result.GetResult<Prisma.$JobHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHistoryCountArgs} args - Arguments to filter JobHistories to count.
     * @example
     * // Count the number of JobHistories
     * const count = await prisma.jobHistory.count({
     *   where: {
     *     // ... the filter for the JobHistories we want to count
     *   }
     * })
    **/
    count<T extends JobHistoryCountArgs>(
      args?: Subset<T, JobHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobHistoryAggregateArgs>(args: Subset<T, JobHistoryAggregateArgs>): Prisma.PrismaPromise<GetJobHistoryAggregateType<T>>

    /**
     * Group by JobHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobHistoryGroupByArgs['orderBy'] }
        : { orderBy?: JobHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobHistory model
   */
  readonly fields: JobHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobHistory model
   */
  interface JobHistoryFieldRefs {
    readonly id: FieldRef<"JobHistory", 'Int'>
    readonly jobId: FieldRef<"JobHistory", 'Int'>
    readonly status: FieldRef<"JobHistory", 'JobStatus'>
    readonly remarks: FieldRef<"JobHistory", 'String'>
    readonly latitude: FieldRef<"JobHistory", 'Float'>
    readonly longitude: FieldRef<"JobHistory", 'Float'>
    readonly updatedBy: FieldRef<"JobHistory", 'Int'>
    readonly createdAt: FieldRef<"JobHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobHistory findUnique
   */
  export type JobHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * Filter, which JobHistory to fetch.
     */
    where: JobHistoryWhereUniqueInput
  }

  /**
   * JobHistory findUniqueOrThrow
   */
  export type JobHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * Filter, which JobHistory to fetch.
     */
    where: JobHistoryWhereUniqueInput
  }

  /**
   * JobHistory findFirst
   */
  export type JobHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * Filter, which JobHistory to fetch.
     */
    where?: JobHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobHistories to fetch.
     */
    orderBy?: JobHistoryOrderByWithRelationInput | JobHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobHistories.
     */
    cursor?: JobHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobHistories.
     */
    distinct?: JobHistoryScalarFieldEnum | JobHistoryScalarFieldEnum[]
  }

  /**
   * JobHistory findFirstOrThrow
   */
  export type JobHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * Filter, which JobHistory to fetch.
     */
    where?: JobHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobHistories to fetch.
     */
    orderBy?: JobHistoryOrderByWithRelationInput | JobHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobHistories.
     */
    cursor?: JobHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobHistories.
     */
    distinct?: JobHistoryScalarFieldEnum | JobHistoryScalarFieldEnum[]
  }

  /**
   * JobHistory findMany
   */
  export type JobHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * Filter, which JobHistories to fetch.
     */
    where?: JobHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobHistories to fetch.
     */
    orderBy?: JobHistoryOrderByWithRelationInput | JobHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobHistories.
     */
    cursor?: JobHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobHistories.
     */
    skip?: number
    distinct?: JobHistoryScalarFieldEnum | JobHistoryScalarFieldEnum[]
  }

  /**
   * JobHistory create
   */
  export type JobHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a JobHistory.
     */
    data: XOR<JobHistoryCreateInput, JobHistoryUncheckedCreateInput>
  }

  /**
   * JobHistory createMany
   */
  export type JobHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobHistories.
     */
    data: JobHistoryCreateManyInput | JobHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobHistory createManyAndReturn
   */
  export type JobHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many JobHistories.
     */
    data: JobHistoryCreateManyInput | JobHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobHistory update
   */
  export type JobHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a JobHistory.
     */
    data: XOR<JobHistoryUpdateInput, JobHistoryUncheckedUpdateInput>
    /**
     * Choose, which JobHistory to update.
     */
    where: JobHistoryWhereUniqueInput
  }

  /**
   * JobHistory updateMany
   */
  export type JobHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobHistories.
     */
    data: XOR<JobHistoryUpdateManyMutationInput, JobHistoryUncheckedUpdateManyInput>
    /**
     * Filter which JobHistories to update
     */
    where?: JobHistoryWhereInput
    /**
     * Limit how many JobHistories to update.
     */
    limit?: number
  }

  /**
   * JobHistory updateManyAndReturn
   */
  export type JobHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * The data used to update JobHistories.
     */
    data: XOR<JobHistoryUpdateManyMutationInput, JobHistoryUncheckedUpdateManyInput>
    /**
     * Filter which JobHistories to update
     */
    where?: JobHistoryWhereInput
    /**
     * Limit how many JobHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobHistory upsert
   */
  export type JobHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the JobHistory to update in case it exists.
     */
    where: JobHistoryWhereUniqueInput
    /**
     * In case the JobHistory found by the `where` argument doesn't exist, create a new JobHistory with this data.
     */
    create: XOR<JobHistoryCreateInput, JobHistoryUncheckedCreateInput>
    /**
     * In case the JobHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobHistoryUpdateInput, JobHistoryUncheckedUpdateInput>
  }

  /**
   * JobHistory delete
   */
  export type JobHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
    /**
     * Filter which JobHistory to delete.
     */
    where: JobHistoryWhereUniqueInput
  }

  /**
   * JobHistory deleteMany
   */
  export type JobHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobHistories to delete
     */
    where?: JobHistoryWhereInput
    /**
     * Limit how many JobHistories to delete.
     */
    limit?: number
  }

  /**
   * JobHistory without action
   */
  export type JobHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHistory
     */
    select?: JobHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHistory
     */
    omit?: JobHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHistoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    role: 'role',
    region: 'region',
    password: 'password',
    online: 'online',
    lastLogin: 'lastLogin',
    lastLogout: 'lastLogout'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    vehicleReg: 'vehicleReg',
    jobType: 'jobType',
    status: 'status',
    scheduledDate: 'scheduledDate',
    location: 'location',
    governorSerial: 'governorSerial',
    governorStatus: 'governorStatus',
    clientName: 'clientName',
    clientPhone: 'clientPhone',
    remarks: 'remarks',
    photoUrl: 'photoUrl',
    clientSignature: 'clientSignature',
    createdAt: 'createdAt',
    technicianId: 'technicianId'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    loginTime: 'loginTime',
    logoutTime: 'logoutTime',
    active: 'active',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const RollCallUserScalarFieldEnum: {
    id: 'id',
    rollCallId: 'rollCallId',
    userId: 'userId',
    status: 'status',
    checkIn: 'checkIn',
    checkOut: 'checkOut',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type RollCallUserScalarFieldEnum = (typeof RollCallUserScalarFieldEnum)[keyof typeof RollCallUserScalarFieldEnum]


  export const RollCallScalarFieldEnum: {
    id: 'id',
    date: 'date',
    region: 'region'
  };

  export type RollCallScalarFieldEnum = (typeof RollCallScalarFieldEnum)[keyof typeof RollCallScalarFieldEnum]


  export const PhotoScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    url: 'url',
    uploadedAt: 'uploadedAt'
  };

  export type PhotoScalarFieldEnum = (typeof PhotoScalarFieldEnum)[keyof typeof PhotoScalarFieldEnum]


  export const JobHistoryScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    status: 'status',
    remarks: 'remarks',
    latitude: 'latitude',
    longitude: 'longitude',
    updatedBy: 'updatedBy',
    createdAt: 'createdAt'
  };

  export type JobHistoryScalarFieldEnum = (typeof JobHistoryScalarFieldEnum)[keyof typeof JobHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'JobType'
   */
  export type EnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType'>
    


  /**
   * Reference to a field of type 'JobType[]'
   */
  export type ListEnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType[]'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    region?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    online?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogout?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    jobs?: JobListRelationFilter
    rollCallUsers?: RollCallUserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    region?: SortOrderInput | SortOrder
    password?: SortOrder
    online?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    lastLogout?: SortOrderInput | SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    jobs?: JobOrderByRelationAggregateInput
    rollCallUsers?: RollCallUserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    region?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    online?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogout?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    jobs?: JobListRelationFilter
    rollCallUsers?: RollCallUserListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    region?: SortOrderInput | SortOrder
    password?: SortOrder
    online?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    lastLogout?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    region?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    online?: BoolWithAggregatesFilter<"User"> | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLogout?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: IntFilter<"Job"> | number
    vehicleReg?: StringFilter<"Job"> | string
    jobType?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    scheduledDate?: DateTimeFilter<"Job"> | Date | string
    location?: StringNullableFilter<"Job"> | string | null
    governorSerial?: StringNullableFilter<"Job"> | string | null
    governorStatus?: StringNullableFilter<"Job"> | string | null
    clientName?: StringNullableFilter<"Job"> | string | null
    clientPhone?: StringNullableFilter<"Job"> | string | null
    remarks?: StringNullableFilter<"Job"> | string | null
    photoUrl?: StringNullableFilter<"Job"> | string | null
    clientSignature?: StringNullableFilter<"Job"> | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    technicianId?: IntNullableFilter<"Job"> | number | null
    assignedTechnician?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    photos?: PhotoListRelationFilter
    history?: JobHistoryListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    vehicleReg?: SortOrder
    jobType?: SortOrder
    status?: SortOrder
    scheduledDate?: SortOrder
    location?: SortOrderInput | SortOrder
    governorSerial?: SortOrderInput | SortOrder
    governorStatus?: SortOrderInput | SortOrder
    clientName?: SortOrderInput | SortOrder
    clientPhone?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    clientSignature?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    technicianId?: SortOrderInput | SortOrder
    assignedTechnician?: UserOrderByWithRelationInput
    photos?: PhotoOrderByRelationAggregateInput
    history?: JobHistoryOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    vehicleReg?: StringFilter<"Job"> | string
    jobType?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    scheduledDate?: DateTimeFilter<"Job"> | Date | string
    location?: StringNullableFilter<"Job"> | string | null
    governorSerial?: StringNullableFilter<"Job"> | string | null
    governorStatus?: StringNullableFilter<"Job"> | string | null
    clientName?: StringNullableFilter<"Job"> | string | null
    clientPhone?: StringNullableFilter<"Job"> | string | null
    remarks?: StringNullableFilter<"Job"> | string | null
    photoUrl?: StringNullableFilter<"Job"> | string | null
    clientSignature?: StringNullableFilter<"Job"> | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    technicianId?: IntNullableFilter<"Job"> | number | null
    assignedTechnician?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    photos?: PhotoListRelationFilter
    history?: JobHistoryListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    vehicleReg?: SortOrder
    jobType?: SortOrder
    status?: SortOrder
    scheduledDate?: SortOrder
    location?: SortOrderInput | SortOrder
    governorSerial?: SortOrderInput | SortOrder
    governorStatus?: SortOrderInput | SortOrder
    clientName?: SortOrderInput | SortOrder
    clientPhone?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    clientSignature?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    technicianId?: SortOrderInput | SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Job"> | number
    vehicleReg?: StringWithAggregatesFilter<"Job"> | string
    jobType?: EnumJobTypeWithAggregatesFilter<"Job"> | $Enums.JobType
    status?: EnumJobStatusWithAggregatesFilter<"Job"> | $Enums.JobStatus
    scheduledDate?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    location?: StringNullableWithAggregatesFilter<"Job"> | string | null
    governorSerial?: StringNullableWithAggregatesFilter<"Job"> | string | null
    governorStatus?: StringNullableWithAggregatesFilter<"Job"> | string | null
    clientName?: StringNullableWithAggregatesFilter<"Job"> | string | null
    clientPhone?: StringNullableWithAggregatesFilter<"Job"> | string | null
    remarks?: StringNullableWithAggregatesFilter<"Job"> | string | null
    photoUrl?: StringNullableWithAggregatesFilter<"Job"> | string | null
    clientSignature?: StringNullableWithAggregatesFilter<"Job"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    technicianId?: IntNullableWithAggregatesFilter<"Job"> | number | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    userId?: IntFilter<"Session"> | number
    loginTime?: DateTimeFilter<"Session"> | Date | string
    logoutTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    active?: BoolFilter<"Session"> | boolean
    latitude?: FloatNullableFilter<"Session"> | number | null
    longitude?: FloatNullableFilter<"Session"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    loginTime?: SortOrder
    logoutTime?: SortOrderInput | SortOrder
    active?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: IntFilter<"Session"> | number
    loginTime?: DateTimeFilter<"Session"> | Date | string
    logoutTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    active?: BoolFilter<"Session"> | boolean
    latitude?: FloatNullableFilter<"Session"> | number | null
    longitude?: FloatNullableFilter<"Session"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    loginTime?: SortOrder
    logoutTime?: SortOrderInput | SortOrder
    active?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    userId?: IntWithAggregatesFilter<"Session"> | number
    loginTime?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    logoutTime?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    active?: BoolWithAggregatesFilter<"Session"> | boolean
    latitude?: FloatNullableWithAggregatesFilter<"Session"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Session"> | number | null
  }

  export type RollCallUserWhereInput = {
    AND?: RollCallUserWhereInput | RollCallUserWhereInput[]
    OR?: RollCallUserWhereInput[]
    NOT?: RollCallUserWhereInput | RollCallUserWhereInput[]
    id?: IntFilter<"RollCallUser"> | number
    rollCallId?: IntFilter<"RollCallUser"> | number
    userId?: IntFilter<"RollCallUser"> | number
    status?: StringNullableFilter<"RollCallUser"> | string | null
    checkIn?: DateTimeNullableFilter<"RollCallUser"> | Date | string | null
    checkOut?: DateTimeNullableFilter<"RollCallUser"> | Date | string | null
    latitude?: FloatNullableFilter<"RollCallUser"> | number | null
    longitude?: FloatNullableFilter<"RollCallUser"> | number | null
    rollCall?: XOR<RollCallScalarRelationFilter, RollCallWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RollCallUserOrderByWithRelationInput = {
    id?: SortOrder
    rollCallId?: SortOrder
    userId?: SortOrder
    status?: SortOrderInput | SortOrder
    checkIn?: SortOrderInput | SortOrder
    checkOut?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    rollCall?: RollCallOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RollCallUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RollCallUserWhereInput | RollCallUserWhereInput[]
    OR?: RollCallUserWhereInput[]
    NOT?: RollCallUserWhereInput | RollCallUserWhereInput[]
    rollCallId?: IntFilter<"RollCallUser"> | number
    userId?: IntFilter<"RollCallUser"> | number
    status?: StringNullableFilter<"RollCallUser"> | string | null
    checkIn?: DateTimeNullableFilter<"RollCallUser"> | Date | string | null
    checkOut?: DateTimeNullableFilter<"RollCallUser"> | Date | string | null
    latitude?: FloatNullableFilter<"RollCallUser"> | number | null
    longitude?: FloatNullableFilter<"RollCallUser"> | number | null
    rollCall?: XOR<RollCallScalarRelationFilter, RollCallWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type RollCallUserOrderByWithAggregationInput = {
    id?: SortOrder
    rollCallId?: SortOrder
    userId?: SortOrder
    status?: SortOrderInput | SortOrder
    checkIn?: SortOrderInput | SortOrder
    checkOut?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    _count?: RollCallUserCountOrderByAggregateInput
    _avg?: RollCallUserAvgOrderByAggregateInput
    _max?: RollCallUserMaxOrderByAggregateInput
    _min?: RollCallUserMinOrderByAggregateInput
    _sum?: RollCallUserSumOrderByAggregateInput
  }

  export type RollCallUserScalarWhereWithAggregatesInput = {
    AND?: RollCallUserScalarWhereWithAggregatesInput | RollCallUserScalarWhereWithAggregatesInput[]
    OR?: RollCallUserScalarWhereWithAggregatesInput[]
    NOT?: RollCallUserScalarWhereWithAggregatesInput | RollCallUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RollCallUser"> | number
    rollCallId?: IntWithAggregatesFilter<"RollCallUser"> | number
    userId?: IntWithAggregatesFilter<"RollCallUser"> | number
    status?: StringNullableWithAggregatesFilter<"RollCallUser"> | string | null
    checkIn?: DateTimeNullableWithAggregatesFilter<"RollCallUser"> | Date | string | null
    checkOut?: DateTimeNullableWithAggregatesFilter<"RollCallUser"> | Date | string | null
    latitude?: FloatNullableWithAggregatesFilter<"RollCallUser"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"RollCallUser"> | number | null
  }

  export type RollCallWhereInput = {
    AND?: RollCallWhereInput | RollCallWhereInput[]
    OR?: RollCallWhereInput[]
    NOT?: RollCallWhereInput | RollCallWhereInput[]
    id?: IntFilter<"RollCall"> | number
    date?: DateTimeFilter<"RollCall"> | Date | string
    region?: StringNullableFilter<"RollCall"> | string | null
    presentUsers?: RollCallUserListRelationFilter
  }

  export type RollCallOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    region?: SortOrderInput | SortOrder
    presentUsers?: RollCallUserOrderByRelationAggregateInput
  }

  export type RollCallWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RollCallWhereInput | RollCallWhereInput[]
    OR?: RollCallWhereInput[]
    NOT?: RollCallWhereInput | RollCallWhereInput[]
    date?: DateTimeFilter<"RollCall"> | Date | string
    region?: StringNullableFilter<"RollCall"> | string | null
    presentUsers?: RollCallUserListRelationFilter
  }, "id">

  export type RollCallOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    region?: SortOrderInput | SortOrder
    _count?: RollCallCountOrderByAggregateInput
    _avg?: RollCallAvgOrderByAggregateInput
    _max?: RollCallMaxOrderByAggregateInput
    _min?: RollCallMinOrderByAggregateInput
    _sum?: RollCallSumOrderByAggregateInput
  }

  export type RollCallScalarWhereWithAggregatesInput = {
    AND?: RollCallScalarWhereWithAggregatesInput | RollCallScalarWhereWithAggregatesInput[]
    OR?: RollCallScalarWhereWithAggregatesInput[]
    NOT?: RollCallScalarWhereWithAggregatesInput | RollCallScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RollCall"> | number
    date?: DateTimeWithAggregatesFilter<"RollCall"> | Date | string
    region?: StringNullableWithAggregatesFilter<"RollCall"> | string | null
  }

  export type PhotoWhereInput = {
    AND?: PhotoWhereInput | PhotoWhereInput[]
    OR?: PhotoWhereInput[]
    NOT?: PhotoWhereInput | PhotoWhereInput[]
    id?: IntFilter<"Photo"> | number
    jobId?: IntFilter<"Photo"> | number
    url?: StringFilter<"Photo"> | string
    uploadedAt?: DateTimeFilter<"Photo"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type PhotoOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
    job?: JobOrderByWithRelationInput
  }

  export type PhotoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PhotoWhereInput | PhotoWhereInput[]
    OR?: PhotoWhereInput[]
    NOT?: PhotoWhereInput | PhotoWhereInput[]
    jobId?: IntFilter<"Photo"> | number
    url?: StringFilter<"Photo"> | string
    uploadedAt?: DateTimeFilter<"Photo"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id">

  export type PhotoOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
    _count?: PhotoCountOrderByAggregateInput
    _avg?: PhotoAvgOrderByAggregateInput
    _max?: PhotoMaxOrderByAggregateInput
    _min?: PhotoMinOrderByAggregateInput
    _sum?: PhotoSumOrderByAggregateInput
  }

  export type PhotoScalarWhereWithAggregatesInput = {
    AND?: PhotoScalarWhereWithAggregatesInput | PhotoScalarWhereWithAggregatesInput[]
    OR?: PhotoScalarWhereWithAggregatesInput[]
    NOT?: PhotoScalarWhereWithAggregatesInput | PhotoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Photo"> | number
    jobId?: IntWithAggregatesFilter<"Photo"> | number
    url?: StringWithAggregatesFilter<"Photo"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Photo"> | Date | string
  }

  export type JobHistoryWhereInput = {
    AND?: JobHistoryWhereInput | JobHistoryWhereInput[]
    OR?: JobHistoryWhereInput[]
    NOT?: JobHistoryWhereInput | JobHistoryWhereInput[]
    id?: IntFilter<"JobHistory"> | number
    jobId?: IntFilter<"JobHistory"> | number
    status?: EnumJobStatusFilter<"JobHistory"> | $Enums.JobStatus
    remarks?: StringNullableFilter<"JobHistory"> | string | null
    latitude?: FloatNullableFilter<"JobHistory"> | number | null
    longitude?: FloatNullableFilter<"JobHistory"> | number | null
    updatedBy?: IntFilter<"JobHistory"> | number
    createdAt?: DateTimeFilter<"JobHistory"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type JobHistoryOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
    remarks?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    job?: JobOrderByWithRelationInput
  }

  export type JobHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobHistoryWhereInput | JobHistoryWhereInput[]
    OR?: JobHistoryWhereInput[]
    NOT?: JobHistoryWhereInput | JobHistoryWhereInput[]
    jobId?: IntFilter<"JobHistory"> | number
    status?: EnumJobStatusFilter<"JobHistory"> | $Enums.JobStatus
    remarks?: StringNullableFilter<"JobHistory"> | string | null
    latitude?: FloatNullableFilter<"JobHistory"> | number | null
    longitude?: FloatNullableFilter<"JobHistory"> | number | null
    updatedBy?: IntFilter<"JobHistory"> | number
    createdAt?: DateTimeFilter<"JobHistory"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id">

  export type JobHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
    remarks?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    _count?: JobHistoryCountOrderByAggregateInput
    _avg?: JobHistoryAvgOrderByAggregateInput
    _max?: JobHistoryMaxOrderByAggregateInput
    _min?: JobHistoryMinOrderByAggregateInput
    _sum?: JobHistorySumOrderByAggregateInput
  }

  export type JobHistoryScalarWhereWithAggregatesInput = {
    AND?: JobHistoryScalarWhereWithAggregatesInput | JobHistoryScalarWhereWithAggregatesInput[]
    OR?: JobHistoryScalarWhereWithAggregatesInput[]
    NOT?: JobHistoryScalarWhereWithAggregatesInput | JobHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobHistory"> | number
    jobId?: IntWithAggregatesFilter<"JobHistory"> | number
    status?: EnumJobStatusWithAggregatesFilter<"JobHistory"> | $Enums.JobStatus
    remarks?: StringNullableWithAggregatesFilter<"JobHistory"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"JobHistory"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"JobHistory"> | number | null
    updatedBy?: IntWithAggregatesFilter<"JobHistory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"JobHistory"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    jobs?: JobCreateNestedManyWithoutAssignedTechnicianInput
    rollCallUsers?: RollCallUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    jobs?: JobUncheckedCreateNestedManyWithoutAssignedTechnicianInput
    rollCallUsers?: RollCallUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    jobs?: JobUpdateManyWithoutAssignedTechnicianNestedInput
    rollCallUsers?: RollCallUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    jobs?: JobUncheckedUpdateManyWithoutAssignedTechnicianNestedInput
    rollCallUsers?: RollCallUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JobCreateInput = {
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    assignedTechnician?: UserCreateNestedOneWithoutJobsInput
    photos?: PhotoCreateNestedManyWithoutJobInput
    history?: JobHistoryCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: number
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    technicianId?: number | null
    photos?: PhotoUncheckedCreateNestedManyWithoutJobInput
    history?: JobHistoryUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTechnician?: UserUpdateOneWithoutJobsNestedInput
    photos?: PhotoUpdateManyWithoutJobNestedInput
    history?: JobHistoryUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianId?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: PhotoUncheckedUpdateManyWithoutJobNestedInput
    history?: JobHistoryUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: number
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    technicianId?: number | null
  }

  export type JobUpdateManyMutationInput = {
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionCreateInput = {
    loginTime?: Date | string
    logoutTime?: Date | string | null
    active?: boolean
    latitude?: number | null
    longitude?: number | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    userId: number
    loginTime?: Date | string
    logoutTime?: Date | string | null
    active?: boolean
    latitude?: number | null
    longitude?: number | null
  }

  export type SessionUpdateInput = {
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    logoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    logoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SessionCreateManyInput = {
    id?: number
    userId: number
    loginTime?: Date | string
    logoutTime?: Date | string | null
    active?: boolean
    latitude?: number | null
    longitude?: number | null
  }

  export type SessionUpdateManyMutationInput = {
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    logoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    logoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RollCallUserCreateInput = {
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    rollCall: RollCallCreateNestedOneWithoutPresentUsersInput
    user: UserCreateNestedOneWithoutRollCallUsersInput
  }

  export type RollCallUserUncheckedCreateInput = {
    id?: number
    rollCallId: number
    userId: number
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type RollCallUserUpdateInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    rollCall?: RollCallUpdateOneRequiredWithoutPresentUsersNestedInput
    user?: UserUpdateOneRequiredWithoutRollCallUsersNestedInput
  }

  export type RollCallUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rollCallId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RollCallUserCreateManyInput = {
    id?: number
    rollCallId: number
    userId: number
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type RollCallUserUpdateManyMutationInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RollCallUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rollCallId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RollCallCreateInput = {
    date?: Date | string
    region?: string | null
    presentUsers?: RollCallUserCreateNestedManyWithoutRollCallInput
  }

  export type RollCallUncheckedCreateInput = {
    id?: number
    date?: Date | string
    region?: string | null
    presentUsers?: RollCallUserUncheckedCreateNestedManyWithoutRollCallInput
  }

  export type RollCallUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    presentUsers?: RollCallUserUpdateManyWithoutRollCallNestedInput
  }

  export type RollCallUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    presentUsers?: RollCallUserUncheckedUpdateManyWithoutRollCallNestedInput
  }

  export type RollCallCreateManyInput = {
    id?: number
    date?: Date | string
    region?: string | null
  }

  export type RollCallUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RollCallUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhotoCreateInput = {
    url: string
    uploadedAt?: Date | string
    job: JobCreateNestedOneWithoutPhotosInput
  }

  export type PhotoUncheckedCreateInput = {
    id?: number
    jobId: number
    url: string
    uploadedAt?: Date | string
  }

  export type PhotoUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutPhotosNestedInput
  }

  export type PhotoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoCreateManyInput = {
    id?: number
    jobId: number
    url: string
    uploadedAt?: Date | string
  }

  export type PhotoUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHistoryCreateInput = {
    status: $Enums.JobStatus
    remarks?: string | null
    latitude?: number | null
    longitude?: number | null
    updatedBy: number
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutHistoryInput
  }

  export type JobHistoryUncheckedCreateInput = {
    id?: number
    jobId: number
    status: $Enums.JobStatus
    remarks?: string | null
    latitude?: number | null
    longitude?: number | null
    updatedBy: number
    createdAt?: Date | string
  }

  export type JobHistoryUpdateInput = {
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type JobHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHistoryCreateManyInput = {
    id?: number
    jobId: number
    status: $Enums.JobStatus
    remarks?: string | null
    latitude?: number | null
    longitude?: number | null
    updatedBy: number
    createdAt?: Date | string
  }

  export type JobHistoryUpdateManyMutationInput = {
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type RollCallUserListRelationFilter = {
    every?: RollCallUserWhereInput
    some?: RollCallUserWhereInput
    none?: RollCallUserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RollCallUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    region?: SortOrder
    password?: SortOrder
    online?: SortOrder
    lastLogin?: SortOrder
    lastLogout?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    region?: SortOrder
    password?: SortOrder
    online?: SortOrder
    lastLogin?: SortOrder
    lastLogout?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    region?: SortOrder
    password?: SortOrder
    online?: SortOrder
    lastLogin?: SortOrder
    lastLogout?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeFilter<$PrismaModel> | $Enums.JobType
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PhotoListRelationFilter = {
    every?: PhotoWhereInput
    some?: PhotoWhereInput
    none?: PhotoWhereInput
  }

  export type JobHistoryListRelationFilter = {
    every?: JobHistoryWhereInput
    some?: JobHistoryWhereInput
    none?: JobHistoryWhereInput
  }

  export type PhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    vehicleReg?: SortOrder
    jobType?: SortOrder
    status?: SortOrder
    scheduledDate?: SortOrder
    location?: SortOrder
    governorSerial?: SortOrder
    governorStatus?: SortOrder
    clientName?: SortOrder
    clientPhone?: SortOrder
    remarks?: SortOrder
    photoUrl?: SortOrder
    clientSignature?: SortOrder
    createdAt?: SortOrder
    technicianId?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    vehicleReg?: SortOrder
    jobType?: SortOrder
    status?: SortOrder
    scheduledDate?: SortOrder
    location?: SortOrder
    governorSerial?: SortOrder
    governorStatus?: SortOrder
    clientName?: SortOrder
    clientPhone?: SortOrder
    remarks?: SortOrder
    photoUrl?: SortOrder
    clientSignature?: SortOrder
    createdAt?: SortOrder
    technicianId?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    vehicleReg?: SortOrder
    jobType?: SortOrder
    status?: SortOrder
    scheduledDate?: SortOrder
    location?: SortOrder
    governorSerial?: SortOrder
    governorStatus?: SortOrder
    clientName?: SortOrder
    clientPhone?: SortOrder
    remarks?: SortOrder
    photoUrl?: SortOrder
    clientSignature?: SortOrder
    createdAt?: SortOrder
    technicianId?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
  }

  export type EnumJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.JobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeFilter<$PrismaModel>
    _max?: NestedEnumJobTypeFilter<$PrismaModel>
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    loginTime?: SortOrder
    logoutTime?: SortOrder
    active?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    loginTime?: SortOrder
    logoutTime?: SortOrder
    active?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    loginTime?: SortOrder
    logoutTime?: SortOrder
    active?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type RollCallScalarRelationFilter = {
    is?: RollCallWhereInput
    isNot?: RollCallWhereInput
  }

  export type RollCallUserCountOrderByAggregateInput = {
    id?: SortOrder
    rollCallId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type RollCallUserAvgOrderByAggregateInput = {
    id?: SortOrder
    rollCallId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type RollCallUserMaxOrderByAggregateInput = {
    id?: SortOrder
    rollCallId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type RollCallUserMinOrderByAggregateInput = {
    id?: SortOrder
    rollCallId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type RollCallUserSumOrderByAggregateInput = {
    id?: SortOrder
    rollCallId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type RollCallCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    region?: SortOrder
  }

  export type RollCallAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RollCallMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    region?: SortOrder
  }

  export type RollCallMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    region?: SortOrder
  }

  export type RollCallSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JobScalarRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type PhotoCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
  }

  export type PhotoAvgOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
  }

  export type PhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
  }

  export type PhotoMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
  }

  export type PhotoSumOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
  }

  export type JobHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
    remarks?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type JobHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedBy?: SortOrder
  }

  export type JobHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
    remarks?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type JobHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
    remarks?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type JobHistorySumOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    updatedBy?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutAssignedTechnicianInput = {
    create?: XOR<JobCreateWithoutAssignedTechnicianInput, JobUncheckedCreateWithoutAssignedTechnicianInput> | JobCreateWithoutAssignedTechnicianInput[] | JobUncheckedCreateWithoutAssignedTechnicianInput[]
    connectOrCreate?: JobCreateOrConnectWithoutAssignedTechnicianInput | JobCreateOrConnectWithoutAssignedTechnicianInput[]
    createMany?: JobCreateManyAssignedTechnicianInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type RollCallUserCreateNestedManyWithoutUserInput = {
    create?: XOR<RollCallUserCreateWithoutUserInput, RollCallUserUncheckedCreateWithoutUserInput> | RollCallUserCreateWithoutUserInput[] | RollCallUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RollCallUserCreateOrConnectWithoutUserInput | RollCallUserCreateOrConnectWithoutUserInput[]
    createMany?: RollCallUserCreateManyUserInputEnvelope
    connect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutAssignedTechnicianInput = {
    create?: XOR<JobCreateWithoutAssignedTechnicianInput, JobUncheckedCreateWithoutAssignedTechnicianInput> | JobCreateWithoutAssignedTechnicianInput[] | JobUncheckedCreateWithoutAssignedTechnicianInput[]
    connectOrCreate?: JobCreateOrConnectWithoutAssignedTechnicianInput | JobCreateOrConnectWithoutAssignedTechnicianInput[]
    createMany?: JobCreateManyAssignedTechnicianInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type RollCallUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RollCallUserCreateWithoutUserInput, RollCallUserUncheckedCreateWithoutUserInput> | RollCallUserCreateWithoutUserInput[] | RollCallUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RollCallUserCreateOrConnectWithoutUserInput | RollCallUserCreateOrConnectWithoutUserInput[]
    createMany?: RollCallUserCreateManyUserInputEnvelope
    connect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type JobUpdateManyWithoutAssignedTechnicianNestedInput = {
    create?: XOR<JobCreateWithoutAssignedTechnicianInput, JobUncheckedCreateWithoutAssignedTechnicianInput> | JobCreateWithoutAssignedTechnicianInput[] | JobUncheckedCreateWithoutAssignedTechnicianInput[]
    connectOrCreate?: JobCreateOrConnectWithoutAssignedTechnicianInput | JobCreateOrConnectWithoutAssignedTechnicianInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutAssignedTechnicianInput | JobUpsertWithWhereUniqueWithoutAssignedTechnicianInput[]
    createMany?: JobCreateManyAssignedTechnicianInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutAssignedTechnicianInput | JobUpdateWithWhereUniqueWithoutAssignedTechnicianInput[]
    updateMany?: JobUpdateManyWithWhereWithoutAssignedTechnicianInput | JobUpdateManyWithWhereWithoutAssignedTechnicianInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type RollCallUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<RollCallUserCreateWithoutUserInput, RollCallUserUncheckedCreateWithoutUserInput> | RollCallUserCreateWithoutUserInput[] | RollCallUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RollCallUserCreateOrConnectWithoutUserInput | RollCallUserCreateOrConnectWithoutUserInput[]
    upsert?: RollCallUserUpsertWithWhereUniqueWithoutUserInput | RollCallUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RollCallUserCreateManyUserInputEnvelope
    set?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    disconnect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    delete?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    connect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    update?: RollCallUserUpdateWithWhereUniqueWithoutUserInput | RollCallUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RollCallUserUpdateManyWithWhereWithoutUserInput | RollCallUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RollCallUserScalarWhereInput | RollCallUserScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutAssignedTechnicianNestedInput = {
    create?: XOR<JobCreateWithoutAssignedTechnicianInput, JobUncheckedCreateWithoutAssignedTechnicianInput> | JobCreateWithoutAssignedTechnicianInput[] | JobUncheckedCreateWithoutAssignedTechnicianInput[]
    connectOrCreate?: JobCreateOrConnectWithoutAssignedTechnicianInput | JobCreateOrConnectWithoutAssignedTechnicianInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutAssignedTechnicianInput | JobUpsertWithWhereUniqueWithoutAssignedTechnicianInput[]
    createMany?: JobCreateManyAssignedTechnicianInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutAssignedTechnicianInput | JobUpdateWithWhereUniqueWithoutAssignedTechnicianInput[]
    updateMany?: JobUpdateManyWithWhereWithoutAssignedTechnicianInput | JobUpdateManyWithWhereWithoutAssignedTechnicianInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type RollCallUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RollCallUserCreateWithoutUserInput, RollCallUserUncheckedCreateWithoutUserInput> | RollCallUserCreateWithoutUserInput[] | RollCallUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RollCallUserCreateOrConnectWithoutUserInput | RollCallUserCreateOrConnectWithoutUserInput[]
    upsert?: RollCallUserUpsertWithWhereUniqueWithoutUserInput | RollCallUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RollCallUserCreateManyUserInputEnvelope
    set?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    disconnect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    delete?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    connect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    update?: RollCallUserUpdateWithWhereUniqueWithoutUserInput | RollCallUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RollCallUserUpdateManyWithWhereWithoutUserInput | RollCallUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RollCallUserScalarWhereInput | RollCallUserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutJobsInput = {
    create?: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobsInput
    connect?: UserWhereUniqueInput
  }

  export type PhotoCreateNestedManyWithoutJobInput = {
    create?: XOR<PhotoCreateWithoutJobInput, PhotoUncheckedCreateWithoutJobInput> | PhotoCreateWithoutJobInput[] | PhotoUncheckedCreateWithoutJobInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutJobInput | PhotoCreateOrConnectWithoutJobInput[]
    createMany?: PhotoCreateManyJobInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type JobHistoryCreateNestedManyWithoutJobInput = {
    create?: XOR<JobHistoryCreateWithoutJobInput, JobHistoryUncheckedCreateWithoutJobInput> | JobHistoryCreateWithoutJobInput[] | JobHistoryUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobHistoryCreateOrConnectWithoutJobInput | JobHistoryCreateOrConnectWithoutJobInput[]
    createMany?: JobHistoryCreateManyJobInputEnvelope
    connect?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
  }

  export type PhotoUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<PhotoCreateWithoutJobInput, PhotoUncheckedCreateWithoutJobInput> | PhotoCreateWithoutJobInput[] | PhotoUncheckedCreateWithoutJobInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutJobInput | PhotoCreateOrConnectWithoutJobInput[]
    createMany?: PhotoCreateManyJobInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type JobHistoryUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobHistoryCreateWithoutJobInput, JobHistoryUncheckedCreateWithoutJobInput> | JobHistoryCreateWithoutJobInput[] | JobHistoryUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobHistoryCreateOrConnectWithoutJobInput | JobHistoryCreateOrConnectWithoutJobInput[]
    createMany?: JobHistoryCreateManyJobInputEnvelope
    connect?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
  }

  export type EnumJobTypeFieldUpdateOperationsInput = {
    set?: $Enums.JobType
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutJobsNestedInput = {
    create?: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobsInput
    upsert?: UserUpsertWithoutJobsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJobsInput, UserUpdateWithoutJobsInput>, UserUncheckedUpdateWithoutJobsInput>
  }

  export type PhotoUpdateManyWithoutJobNestedInput = {
    create?: XOR<PhotoCreateWithoutJobInput, PhotoUncheckedCreateWithoutJobInput> | PhotoCreateWithoutJobInput[] | PhotoUncheckedCreateWithoutJobInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutJobInput | PhotoCreateOrConnectWithoutJobInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutJobInput | PhotoUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: PhotoCreateManyJobInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutJobInput | PhotoUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutJobInput | PhotoUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type JobHistoryUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobHistoryCreateWithoutJobInput, JobHistoryUncheckedCreateWithoutJobInput> | JobHistoryCreateWithoutJobInput[] | JobHistoryUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobHistoryCreateOrConnectWithoutJobInput | JobHistoryCreateOrConnectWithoutJobInput[]
    upsert?: JobHistoryUpsertWithWhereUniqueWithoutJobInput | JobHistoryUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobHistoryCreateManyJobInputEnvelope
    set?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
    disconnect?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
    delete?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
    connect?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
    update?: JobHistoryUpdateWithWhereUniqueWithoutJobInput | JobHistoryUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobHistoryUpdateManyWithWhereWithoutJobInput | JobHistoryUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobHistoryScalarWhereInput | JobHistoryScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PhotoUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<PhotoCreateWithoutJobInput, PhotoUncheckedCreateWithoutJobInput> | PhotoCreateWithoutJobInput[] | PhotoUncheckedCreateWithoutJobInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutJobInput | PhotoCreateOrConnectWithoutJobInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutJobInput | PhotoUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: PhotoCreateManyJobInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutJobInput | PhotoUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutJobInput | PhotoUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type JobHistoryUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobHistoryCreateWithoutJobInput, JobHistoryUncheckedCreateWithoutJobInput> | JobHistoryCreateWithoutJobInput[] | JobHistoryUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobHistoryCreateOrConnectWithoutJobInput | JobHistoryCreateOrConnectWithoutJobInput[]
    upsert?: JobHistoryUpsertWithWhereUniqueWithoutJobInput | JobHistoryUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobHistoryCreateManyJobInputEnvelope
    set?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
    disconnect?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
    delete?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
    connect?: JobHistoryWhereUniqueInput | JobHistoryWhereUniqueInput[]
    update?: JobHistoryUpdateWithWhereUniqueWithoutJobInput | JobHistoryUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobHistoryUpdateManyWithWhereWithoutJobInput | JobHistoryUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobHistoryScalarWhereInput | JobHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type RollCallCreateNestedOneWithoutPresentUsersInput = {
    create?: XOR<RollCallCreateWithoutPresentUsersInput, RollCallUncheckedCreateWithoutPresentUsersInput>
    connectOrCreate?: RollCallCreateOrConnectWithoutPresentUsersInput
    connect?: RollCallWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRollCallUsersInput = {
    create?: XOR<UserCreateWithoutRollCallUsersInput, UserUncheckedCreateWithoutRollCallUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutRollCallUsersInput
    connect?: UserWhereUniqueInput
  }

  export type RollCallUpdateOneRequiredWithoutPresentUsersNestedInput = {
    create?: XOR<RollCallCreateWithoutPresentUsersInput, RollCallUncheckedCreateWithoutPresentUsersInput>
    connectOrCreate?: RollCallCreateOrConnectWithoutPresentUsersInput
    upsert?: RollCallUpsertWithoutPresentUsersInput
    connect?: RollCallWhereUniqueInput
    update?: XOR<XOR<RollCallUpdateToOneWithWhereWithoutPresentUsersInput, RollCallUpdateWithoutPresentUsersInput>, RollCallUncheckedUpdateWithoutPresentUsersInput>
  }

  export type UserUpdateOneRequiredWithoutRollCallUsersNestedInput = {
    create?: XOR<UserCreateWithoutRollCallUsersInput, UserUncheckedCreateWithoutRollCallUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutRollCallUsersInput
    upsert?: UserUpsertWithoutRollCallUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRollCallUsersInput, UserUpdateWithoutRollCallUsersInput>, UserUncheckedUpdateWithoutRollCallUsersInput>
  }

  export type RollCallUserCreateNestedManyWithoutRollCallInput = {
    create?: XOR<RollCallUserCreateWithoutRollCallInput, RollCallUserUncheckedCreateWithoutRollCallInput> | RollCallUserCreateWithoutRollCallInput[] | RollCallUserUncheckedCreateWithoutRollCallInput[]
    connectOrCreate?: RollCallUserCreateOrConnectWithoutRollCallInput | RollCallUserCreateOrConnectWithoutRollCallInput[]
    createMany?: RollCallUserCreateManyRollCallInputEnvelope
    connect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
  }

  export type RollCallUserUncheckedCreateNestedManyWithoutRollCallInput = {
    create?: XOR<RollCallUserCreateWithoutRollCallInput, RollCallUserUncheckedCreateWithoutRollCallInput> | RollCallUserCreateWithoutRollCallInput[] | RollCallUserUncheckedCreateWithoutRollCallInput[]
    connectOrCreate?: RollCallUserCreateOrConnectWithoutRollCallInput | RollCallUserCreateOrConnectWithoutRollCallInput[]
    createMany?: RollCallUserCreateManyRollCallInputEnvelope
    connect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
  }

  export type RollCallUserUpdateManyWithoutRollCallNestedInput = {
    create?: XOR<RollCallUserCreateWithoutRollCallInput, RollCallUserUncheckedCreateWithoutRollCallInput> | RollCallUserCreateWithoutRollCallInput[] | RollCallUserUncheckedCreateWithoutRollCallInput[]
    connectOrCreate?: RollCallUserCreateOrConnectWithoutRollCallInput | RollCallUserCreateOrConnectWithoutRollCallInput[]
    upsert?: RollCallUserUpsertWithWhereUniqueWithoutRollCallInput | RollCallUserUpsertWithWhereUniqueWithoutRollCallInput[]
    createMany?: RollCallUserCreateManyRollCallInputEnvelope
    set?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    disconnect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    delete?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    connect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    update?: RollCallUserUpdateWithWhereUniqueWithoutRollCallInput | RollCallUserUpdateWithWhereUniqueWithoutRollCallInput[]
    updateMany?: RollCallUserUpdateManyWithWhereWithoutRollCallInput | RollCallUserUpdateManyWithWhereWithoutRollCallInput[]
    deleteMany?: RollCallUserScalarWhereInput | RollCallUserScalarWhereInput[]
  }

  export type RollCallUserUncheckedUpdateManyWithoutRollCallNestedInput = {
    create?: XOR<RollCallUserCreateWithoutRollCallInput, RollCallUserUncheckedCreateWithoutRollCallInput> | RollCallUserCreateWithoutRollCallInput[] | RollCallUserUncheckedCreateWithoutRollCallInput[]
    connectOrCreate?: RollCallUserCreateOrConnectWithoutRollCallInput | RollCallUserCreateOrConnectWithoutRollCallInput[]
    upsert?: RollCallUserUpsertWithWhereUniqueWithoutRollCallInput | RollCallUserUpsertWithWhereUniqueWithoutRollCallInput[]
    createMany?: RollCallUserCreateManyRollCallInputEnvelope
    set?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    disconnect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    delete?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    connect?: RollCallUserWhereUniqueInput | RollCallUserWhereUniqueInput[]
    update?: RollCallUserUpdateWithWhereUniqueWithoutRollCallInput | RollCallUserUpdateWithWhereUniqueWithoutRollCallInput[]
    updateMany?: RollCallUserUpdateManyWithWhereWithoutRollCallInput | RollCallUserUpdateManyWithWhereWithoutRollCallInput[]
    deleteMany?: RollCallUserScalarWhereInput | RollCallUserScalarWhereInput[]
  }

  export type JobCreateNestedOneWithoutPhotosInput = {
    create?: XOR<JobCreateWithoutPhotosInput, JobUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: JobCreateOrConnectWithoutPhotosInput
    connect?: JobWhereUniqueInput
  }

  export type JobUpdateOneRequiredWithoutPhotosNestedInput = {
    create?: XOR<JobCreateWithoutPhotosInput, JobUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: JobCreateOrConnectWithoutPhotosInput
    upsert?: JobUpsertWithoutPhotosInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutPhotosInput, JobUpdateWithoutPhotosInput>, JobUncheckedUpdateWithoutPhotosInput>
  }

  export type JobCreateNestedOneWithoutHistoryInput = {
    create?: XOR<JobCreateWithoutHistoryInput, JobUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: JobCreateOrConnectWithoutHistoryInput
    connect?: JobWhereUniqueInput
  }

  export type JobUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<JobCreateWithoutHistoryInput, JobUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: JobCreateOrConnectWithoutHistoryInput
    upsert?: JobUpsertWithoutHistoryInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutHistoryInput, JobUpdateWithoutHistoryInput>, JobUncheckedUpdateWithoutHistoryInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeFilter<$PrismaModel> | $Enums.JobType
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.JobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeFilter<$PrismaModel>
    _max?: NestedEnumJobTypeFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SessionCreateWithoutUserInput = {
    loginTime?: Date | string
    logoutTime?: Date | string | null
    active?: boolean
    latitude?: number | null
    longitude?: number | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    loginTime?: Date | string
    logoutTime?: Date | string | null
    active?: boolean
    latitude?: number | null
    longitude?: number | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutAssignedTechnicianInput = {
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    photos?: PhotoCreateNestedManyWithoutJobInput
    history?: JobHistoryCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutAssignedTechnicianInput = {
    id?: number
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutJobInput
    history?: JobHistoryUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutAssignedTechnicianInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutAssignedTechnicianInput, JobUncheckedCreateWithoutAssignedTechnicianInput>
  }

  export type JobCreateManyAssignedTechnicianInputEnvelope = {
    data: JobCreateManyAssignedTechnicianInput | JobCreateManyAssignedTechnicianInput[]
    skipDuplicates?: boolean
  }

  export type RollCallUserCreateWithoutUserInput = {
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    rollCall: RollCallCreateNestedOneWithoutPresentUsersInput
  }

  export type RollCallUserUncheckedCreateWithoutUserInput = {
    id?: number
    rollCallId: number
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type RollCallUserCreateOrConnectWithoutUserInput = {
    where: RollCallUserWhereUniqueInput
    create: XOR<RollCallUserCreateWithoutUserInput, RollCallUserUncheckedCreateWithoutUserInput>
  }

  export type RollCallUserCreateManyUserInputEnvelope = {
    data: RollCallUserCreateManyUserInput | RollCallUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: IntFilter<"Session"> | number
    userId?: IntFilter<"Session"> | number
    loginTime?: DateTimeFilter<"Session"> | Date | string
    logoutTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    active?: BoolFilter<"Session"> | boolean
    latitude?: FloatNullableFilter<"Session"> | number | null
    longitude?: FloatNullableFilter<"Session"> | number | null
  }

  export type JobUpsertWithWhereUniqueWithoutAssignedTechnicianInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutAssignedTechnicianInput, JobUncheckedUpdateWithoutAssignedTechnicianInput>
    create: XOR<JobCreateWithoutAssignedTechnicianInput, JobUncheckedCreateWithoutAssignedTechnicianInput>
  }

  export type JobUpdateWithWhereUniqueWithoutAssignedTechnicianInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutAssignedTechnicianInput, JobUncheckedUpdateWithoutAssignedTechnicianInput>
  }

  export type JobUpdateManyWithWhereWithoutAssignedTechnicianInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutAssignedTechnicianInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: IntFilter<"Job"> | number
    vehicleReg?: StringFilter<"Job"> | string
    jobType?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    scheduledDate?: DateTimeFilter<"Job"> | Date | string
    location?: StringNullableFilter<"Job"> | string | null
    governorSerial?: StringNullableFilter<"Job"> | string | null
    governorStatus?: StringNullableFilter<"Job"> | string | null
    clientName?: StringNullableFilter<"Job"> | string | null
    clientPhone?: StringNullableFilter<"Job"> | string | null
    remarks?: StringNullableFilter<"Job"> | string | null
    photoUrl?: StringNullableFilter<"Job"> | string | null
    clientSignature?: StringNullableFilter<"Job"> | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    technicianId?: IntNullableFilter<"Job"> | number | null
  }

  export type RollCallUserUpsertWithWhereUniqueWithoutUserInput = {
    where: RollCallUserWhereUniqueInput
    update: XOR<RollCallUserUpdateWithoutUserInput, RollCallUserUncheckedUpdateWithoutUserInput>
    create: XOR<RollCallUserCreateWithoutUserInput, RollCallUserUncheckedCreateWithoutUserInput>
  }

  export type RollCallUserUpdateWithWhereUniqueWithoutUserInput = {
    where: RollCallUserWhereUniqueInput
    data: XOR<RollCallUserUpdateWithoutUserInput, RollCallUserUncheckedUpdateWithoutUserInput>
  }

  export type RollCallUserUpdateManyWithWhereWithoutUserInput = {
    where: RollCallUserScalarWhereInput
    data: XOR<RollCallUserUpdateManyMutationInput, RollCallUserUncheckedUpdateManyWithoutUserInput>
  }

  export type RollCallUserScalarWhereInput = {
    AND?: RollCallUserScalarWhereInput | RollCallUserScalarWhereInput[]
    OR?: RollCallUserScalarWhereInput[]
    NOT?: RollCallUserScalarWhereInput | RollCallUserScalarWhereInput[]
    id?: IntFilter<"RollCallUser"> | number
    rollCallId?: IntFilter<"RollCallUser"> | number
    userId?: IntFilter<"RollCallUser"> | number
    status?: StringNullableFilter<"RollCallUser"> | string | null
    checkIn?: DateTimeNullableFilter<"RollCallUser"> | Date | string | null
    checkOut?: DateTimeNullableFilter<"RollCallUser"> | Date | string | null
    latitude?: FloatNullableFilter<"RollCallUser"> | number | null
    longitude?: FloatNullableFilter<"RollCallUser"> | number | null
  }

  export type UserCreateWithoutJobsInput = {
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    rollCallUsers?: RollCallUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJobsInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    rollCallUsers?: RollCallUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
  }

  export type PhotoCreateWithoutJobInput = {
    url: string
    uploadedAt?: Date | string
  }

  export type PhotoUncheckedCreateWithoutJobInput = {
    id?: number
    url: string
    uploadedAt?: Date | string
  }

  export type PhotoCreateOrConnectWithoutJobInput = {
    where: PhotoWhereUniqueInput
    create: XOR<PhotoCreateWithoutJobInput, PhotoUncheckedCreateWithoutJobInput>
  }

  export type PhotoCreateManyJobInputEnvelope = {
    data: PhotoCreateManyJobInput | PhotoCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type JobHistoryCreateWithoutJobInput = {
    status: $Enums.JobStatus
    remarks?: string | null
    latitude?: number | null
    longitude?: number | null
    updatedBy: number
    createdAt?: Date | string
  }

  export type JobHistoryUncheckedCreateWithoutJobInput = {
    id?: number
    status: $Enums.JobStatus
    remarks?: string | null
    latitude?: number | null
    longitude?: number | null
    updatedBy: number
    createdAt?: Date | string
  }

  export type JobHistoryCreateOrConnectWithoutJobInput = {
    where: JobHistoryWhereUniqueInput
    create: XOR<JobHistoryCreateWithoutJobInput, JobHistoryUncheckedCreateWithoutJobInput>
  }

  export type JobHistoryCreateManyJobInputEnvelope = {
    data: JobHistoryCreateManyJobInput | JobHistoryCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutJobsInput = {
    update: XOR<UserUpdateWithoutJobsInput, UserUncheckedUpdateWithoutJobsInput>
    create: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJobsInput, UserUncheckedUpdateWithoutJobsInput>
  }

  export type UserUpdateWithoutJobsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    rollCallUsers?: RollCallUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    rollCallUsers?: RollCallUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PhotoUpsertWithWhereUniqueWithoutJobInput = {
    where: PhotoWhereUniqueInput
    update: XOR<PhotoUpdateWithoutJobInput, PhotoUncheckedUpdateWithoutJobInput>
    create: XOR<PhotoCreateWithoutJobInput, PhotoUncheckedCreateWithoutJobInput>
  }

  export type PhotoUpdateWithWhereUniqueWithoutJobInput = {
    where: PhotoWhereUniqueInput
    data: XOR<PhotoUpdateWithoutJobInput, PhotoUncheckedUpdateWithoutJobInput>
  }

  export type PhotoUpdateManyWithWhereWithoutJobInput = {
    where: PhotoScalarWhereInput
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyWithoutJobInput>
  }

  export type PhotoScalarWhereInput = {
    AND?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
    OR?: PhotoScalarWhereInput[]
    NOT?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
    id?: IntFilter<"Photo"> | number
    jobId?: IntFilter<"Photo"> | number
    url?: StringFilter<"Photo"> | string
    uploadedAt?: DateTimeFilter<"Photo"> | Date | string
  }

  export type JobHistoryUpsertWithWhereUniqueWithoutJobInput = {
    where: JobHistoryWhereUniqueInput
    update: XOR<JobHistoryUpdateWithoutJobInput, JobHistoryUncheckedUpdateWithoutJobInput>
    create: XOR<JobHistoryCreateWithoutJobInput, JobHistoryUncheckedCreateWithoutJobInput>
  }

  export type JobHistoryUpdateWithWhereUniqueWithoutJobInput = {
    where: JobHistoryWhereUniqueInput
    data: XOR<JobHistoryUpdateWithoutJobInput, JobHistoryUncheckedUpdateWithoutJobInput>
  }

  export type JobHistoryUpdateManyWithWhereWithoutJobInput = {
    where: JobHistoryScalarWhereInput
    data: XOR<JobHistoryUpdateManyMutationInput, JobHistoryUncheckedUpdateManyWithoutJobInput>
  }

  export type JobHistoryScalarWhereInput = {
    AND?: JobHistoryScalarWhereInput | JobHistoryScalarWhereInput[]
    OR?: JobHistoryScalarWhereInput[]
    NOT?: JobHistoryScalarWhereInput | JobHistoryScalarWhereInput[]
    id?: IntFilter<"JobHistory"> | number
    jobId?: IntFilter<"JobHistory"> | number
    status?: EnumJobStatusFilter<"JobHistory"> | $Enums.JobStatus
    remarks?: StringNullableFilter<"JobHistory"> | string | null
    latitude?: FloatNullableFilter<"JobHistory"> | number | null
    longitude?: FloatNullableFilter<"JobHistory"> | number | null
    updatedBy?: IntFilter<"JobHistory"> | number
    createdAt?: DateTimeFilter<"JobHistory"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
    jobs?: JobCreateNestedManyWithoutAssignedTechnicianInput
    rollCallUsers?: RollCallUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
    jobs?: JobUncheckedCreateNestedManyWithoutAssignedTechnicianInput
    rollCallUsers?: RollCallUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: JobUpdateManyWithoutAssignedTechnicianNestedInput
    rollCallUsers?: RollCallUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: JobUncheckedUpdateManyWithoutAssignedTechnicianNestedInput
    rollCallUsers?: RollCallUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RollCallCreateWithoutPresentUsersInput = {
    date?: Date | string
    region?: string | null
  }

  export type RollCallUncheckedCreateWithoutPresentUsersInput = {
    id?: number
    date?: Date | string
    region?: string | null
  }

  export type RollCallCreateOrConnectWithoutPresentUsersInput = {
    where: RollCallWhereUniqueInput
    create: XOR<RollCallCreateWithoutPresentUsersInput, RollCallUncheckedCreateWithoutPresentUsersInput>
  }

  export type UserCreateWithoutRollCallUsersInput = {
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    jobs?: JobCreateNestedManyWithoutAssignedTechnicianInput
  }

  export type UserUncheckedCreateWithoutRollCallUsersInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    role: $Enums.Role
    region?: string | null
    password: string
    online?: boolean
    lastLogin?: Date | string | null
    lastLogout?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    jobs?: JobUncheckedCreateNestedManyWithoutAssignedTechnicianInput
  }

  export type UserCreateOrConnectWithoutRollCallUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRollCallUsersInput, UserUncheckedCreateWithoutRollCallUsersInput>
  }

  export type RollCallUpsertWithoutPresentUsersInput = {
    update: XOR<RollCallUpdateWithoutPresentUsersInput, RollCallUncheckedUpdateWithoutPresentUsersInput>
    create: XOR<RollCallCreateWithoutPresentUsersInput, RollCallUncheckedCreateWithoutPresentUsersInput>
    where?: RollCallWhereInput
  }

  export type RollCallUpdateToOneWithWhereWithoutPresentUsersInput = {
    where?: RollCallWhereInput
    data: XOR<RollCallUpdateWithoutPresentUsersInput, RollCallUncheckedUpdateWithoutPresentUsersInput>
  }

  export type RollCallUpdateWithoutPresentUsersInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RollCallUncheckedUpdateWithoutPresentUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutRollCallUsersInput = {
    update: XOR<UserUpdateWithoutRollCallUsersInput, UserUncheckedUpdateWithoutRollCallUsersInput>
    create: XOR<UserCreateWithoutRollCallUsersInput, UserUncheckedCreateWithoutRollCallUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRollCallUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRollCallUsersInput, UserUncheckedUpdateWithoutRollCallUsersInput>
  }

  export type UserUpdateWithoutRollCallUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    jobs?: JobUpdateManyWithoutAssignedTechnicianNestedInput
  }

  export type UserUncheckedUpdateWithoutRollCallUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    region?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    online?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogout?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    jobs?: JobUncheckedUpdateManyWithoutAssignedTechnicianNestedInput
  }

  export type RollCallUserCreateWithoutRollCallInput = {
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    user: UserCreateNestedOneWithoutRollCallUsersInput
  }

  export type RollCallUserUncheckedCreateWithoutRollCallInput = {
    id?: number
    userId: number
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type RollCallUserCreateOrConnectWithoutRollCallInput = {
    where: RollCallUserWhereUniqueInput
    create: XOR<RollCallUserCreateWithoutRollCallInput, RollCallUserUncheckedCreateWithoutRollCallInput>
  }

  export type RollCallUserCreateManyRollCallInputEnvelope = {
    data: RollCallUserCreateManyRollCallInput | RollCallUserCreateManyRollCallInput[]
    skipDuplicates?: boolean
  }

  export type RollCallUserUpsertWithWhereUniqueWithoutRollCallInput = {
    where: RollCallUserWhereUniqueInput
    update: XOR<RollCallUserUpdateWithoutRollCallInput, RollCallUserUncheckedUpdateWithoutRollCallInput>
    create: XOR<RollCallUserCreateWithoutRollCallInput, RollCallUserUncheckedCreateWithoutRollCallInput>
  }

  export type RollCallUserUpdateWithWhereUniqueWithoutRollCallInput = {
    where: RollCallUserWhereUniqueInput
    data: XOR<RollCallUserUpdateWithoutRollCallInput, RollCallUserUncheckedUpdateWithoutRollCallInput>
  }

  export type RollCallUserUpdateManyWithWhereWithoutRollCallInput = {
    where: RollCallUserScalarWhereInput
    data: XOR<RollCallUserUpdateManyMutationInput, RollCallUserUncheckedUpdateManyWithoutRollCallInput>
  }

  export type JobCreateWithoutPhotosInput = {
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    assignedTechnician?: UserCreateNestedOneWithoutJobsInput
    history?: JobHistoryCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutPhotosInput = {
    id?: number
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    technicianId?: number | null
    history?: JobHistoryUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutPhotosInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutPhotosInput, JobUncheckedCreateWithoutPhotosInput>
  }

  export type JobUpsertWithoutPhotosInput = {
    update: XOR<JobUpdateWithoutPhotosInput, JobUncheckedUpdateWithoutPhotosInput>
    create: XOR<JobCreateWithoutPhotosInput, JobUncheckedCreateWithoutPhotosInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutPhotosInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutPhotosInput, JobUncheckedUpdateWithoutPhotosInput>
  }

  export type JobUpdateWithoutPhotosInput = {
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTechnician?: UserUpdateOneWithoutJobsNestedInput
    history?: JobHistoryUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutPhotosInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianId?: NullableIntFieldUpdateOperationsInput | number | null
    history?: JobHistoryUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateWithoutHistoryInput = {
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    assignedTechnician?: UserCreateNestedOneWithoutJobsInput
    photos?: PhotoCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutHistoryInput = {
    id?: number
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
    technicianId?: number | null
    photos?: PhotoUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutHistoryInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutHistoryInput, JobUncheckedCreateWithoutHistoryInput>
  }

  export type JobUpsertWithoutHistoryInput = {
    update: XOR<JobUpdateWithoutHistoryInput, JobUncheckedUpdateWithoutHistoryInput>
    create: XOR<JobCreateWithoutHistoryInput, JobUncheckedCreateWithoutHistoryInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutHistoryInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutHistoryInput, JobUncheckedUpdateWithoutHistoryInput>
  }

  export type JobUpdateWithoutHistoryInput = {
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTechnician?: UserUpdateOneWithoutJobsNestedInput
    photos?: PhotoUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianId?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: PhotoUncheckedUpdateManyWithoutJobNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: number
    loginTime?: Date | string
    logoutTime?: Date | string | null
    active?: boolean
    latitude?: number | null
    longitude?: number | null
  }

  export type JobCreateManyAssignedTechnicianInput = {
    id?: number
    vehicleReg: string
    jobType: $Enums.JobType
    status?: $Enums.JobStatus
    scheduledDate: Date | string
    location?: string | null
    governorSerial?: string | null
    governorStatus?: string | null
    clientName?: string | null
    clientPhone?: string | null
    remarks?: string | null
    photoUrl?: string | null
    clientSignature?: string | null
    createdAt?: Date | string
  }

  export type RollCallUserCreateManyUserInput = {
    id?: number
    rollCallId: number
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type SessionUpdateWithoutUserInput = {
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    logoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    logoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    loginTime?: DateTimeFieldUpdateOperationsInput | Date | string
    logoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type JobUpdateWithoutAssignedTechnicianInput = {
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUpdateManyWithoutJobNestedInput
    history?: JobHistoryUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutAssignedTechnicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutJobNestedInput
    history?: JobHistoryUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutAssignedTechnicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicleReg?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    governorSerial?: NullableStringFieldUpdateOperationsInput | string | null
    governorStatus?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    clientPhone?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    clientSignature?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollCallUserUpdateWithoutUserInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    rollCall?: RollCallUpdateOneRequiredWithoutPresentUsersNestedInput
  }

  export type RollCallUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    rollCallId?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RollCallUserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    rollCallId?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PhotoCreateManyJobInput = {
    id?: number
    url: string
    uploadedAt?: Date | string
  }

  export type JobHistoryCreateManyJobInput = {
    id?: number
    status: $Enums.JobStatus
    remarks?: string | null
    latitude?: number | null
    longitude?: number | null
    updatedBy: number
    createdAt?: Date | string
  }

  export type PhotoUpdateWithoutJobInput = {
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHistoryUpdateWithoutJobInput = {
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHistoryUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHistoryUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollCallUserCreateManyRollCallInput = {
    id?: number
    userId: number
    status?: string | null
    checkIn?: Date | string | null
    checkOut?: Date | string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type RollCallUserUpdateWithoutRollCallInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutRollCallUsersNestedInput
  }

  export type RollCallUserUncheckedUpdateWithoutRollCallInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RollCallUserUncheckedUpdateManyWithoutRollCallInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    checkIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}