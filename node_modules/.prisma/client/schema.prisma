datasource db {
  provider = "postgresql" // or "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  role          Role
  region        String?
  password      String
  online        Boolean        @default(false)
  lastLogin     DateTime?
  lastLogout    DateTime?
  sessions      Session[]
  jobs          Job[]          @relation("TechnicianJobs")
  rollCallUsers RollCallUser[] // ðŸ‘ˆ FIX: back relation added
}

model RollCallUser {
  id         Int      @id @default(autoincrement())
  rollCall   RollCall @relation(fields: [rollCallId], references: [id])
  rollCallId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Job {
  id                 Int       @id @default(autoincrement())
  vehicleReg         String
  jobType            JobType
  status             JobStatus @default(PENDING)
  scheduledDate      DateTime
  location           String?
  governorSerial     String?
  governorStatus     String?
  clientName         String?
  clientPhone        String?
  remarks            String?
  photoUrl           String?
  clientSignature    String?
  createdAt          DateTime  @default(now())
  assignedTechnician User?     @relation("TechnicianJobs", fields: [technicianId], references: [id])
  technicianId       Int?
}

model Session {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  loginTime  DateTime  @default(now())
  logoutTime DateTime?
  active     Boolean   @default(true)
}

model RollCall {
  id           Int            @id @default(autoincrement())
  date         DateTime       @default(now())
  region       String?
  presentUsers RollCallUser[]
}

enum Role {
  ADMIN
  TECHNICIAN
  STAFF
}

enum JobType {
  INSTALL
  RENEWAL
  FAULT_CHECK
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  DONE
  NOT_DONE
  ESCALATED
}
