
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  role: 'role',
  region: 'region',
  password: 'password',
  online: 'online',
  lastLogin: 'lastLogin',
  lastLogout: 'lastLogout'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  vehicleReg: 'vehicleReg',
  jobType: 'jobType',
  status: 'status',
  scheduledDate: 'scheduledDate',
  location: 'location',
  governorSerial: 'governorSerial',
  governorStatus: 'governorStatus',
  clientName: 'clientName',
  clientPhone: 'clientPhone',
  remarks: 'remarks',
  photoUrl: 'photoUrl',
  clientSignature: 'clientSignature',
  createdAt: 'createdAt',
  technicianId: 'technicianId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  loginTime: 'loginTime',
  logoutTime: 'logoutTime',
  active: 'active',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.RollCallUserScalarFieldEnum = {
  id: 'id',
  rollCallId: 'rollCallId',
  userId: 'userId',
  status: 'status',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.RollCallScalarFieldEnum = {
  id: 'id',
  date: 'date',
  region: 'region'
};

exports.Prisma.PhotoScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  url: 'url',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.JobHistoryScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  status: 'status',
  remarks: 'remarks',
  latitude: 'latitude',
  longitude: 'longitude',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  TECHNICIAN: 'TECHNICIAN',
  STAFF: 'STAFF'
};

exports.JobType = exports.$Enums.JobType = {
  INSTALL: 'INSTALL',
  RENEWAL: 'RENEWAL',
  FAULT_CHECK: 'FAULT_CHECK',
  REPAIR: 'REPAIR'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE',
  NOT_DONE: 'NOT_DONE',
  ESCALATED: 'ESCALATED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Job: 'Job',
  Session: 'Session',
  RollCallUser: 'RollCallUser',
  RollCall: 'RollCall',
  Photo: 'Photo',
  JobHistory: 'JobHistory'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\KNNY\\jendietech\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\KNNY\\jendietech\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ----------------------\n// Datasource & Generator\n// ----------------------\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// ----------------------\n// Enums\n// ----------------------\nenum Role {\n  ADMIN\n  TECHNICIAN\n  STAFF\n}\n\nenum JobType {\n  INSTALL\n  RENEWAL\n  FAULT_CHECK\n  REPAIR\n}\n\nenum JobStatus {\n  PENDING\n  IN_PROGRESS\n  DONE\n  NOT_DONE\n  ESCALATED\n}\n\n// ----------------------\n// Models\n// ----------------------\n\nmodel User {\n  id            Int            @id @default(autoincrement())\n  name          String\n  email         String?        @unique\n  phone         String?        @unique\n  role          Role\n  region        String?\n  password      String\n  online        Boolean        @default(false)\n  lastLogin     DateTime?\n  lastLogout    DateTime?\n  sessions      Session[]\n  jobs          Job[]          @relation(\"TechnicianJobs\")\n  rollCallUsers RollCallUser[]\n}\n\nmodel Job {\n  id              Int       @id @default(autoincrement())\n  vehicleReg      String\n  jobType         JobType\n  status          JobStatus @default(PENDING)\n  scheduledDate   DateTime\n  location        String?\n  governorSerial  String?\n  governorStatus  String?\n  clientName      String?\n  clientPhone     String?\n  remarks         String?\n  photoUrl        String?\n  clientSignature String?\n  createdAt       DateTime  @default(now())\n\n  assignedTechnician User? @relation(\"TechnicianJobs\", fields: [technicianId], references: [id])\n  technicianId       Int?\n\n  photos  Photo[]\n  history JobHistory[]\n\n  @@unique([vehicleReg, status])\n}\n\nmodel Session {\n  id         Int       @id @default(autoincrement())\n  user       User      @relation(fields: [userId], references: [id])\n  userId     Int\n  loginTime  DateTime  @default(now())\n  logoutTime DateTime?\n  active     Boolean   @default(true)\n  latitude   Float?\n  longitude  Float?\n}\n\nmodel RollCallUser {\n  id         Int      @id @default(autoincrement())\n  rollCall   RollCall @relation(fields: [rollCallId], references: [id])\n  rollCallId Int\n  user       User     @relation(fields: [userId], references: [id])\n  userId     Int\n\n  status    String? // \"PRESENT\", \"CHECKED_OUT\"\n  checkIn   DateTime?\n  checkOut  DateTime?\n  latitude  Float?\n  longitude Float?\n}\n\nmodel RollCall {\n  id           Int            @id @default(autoincrement())\n  date         DateTime       @default(now())\n  region       String?\n  presentUsers RollCallUser[]\n}\n\nmodel Photo {\n  id         Int      @id @default(autoincrement())\n  job        Job      @relation(fields: [jobId], references: [id])\n  jobId      Int\n  url        String\n  uploadedAt DateTime @default(now())\n}\n\nmodel JobHistory {\n  id        Int       @id @default(autoincrement())\n  job       Job       @relation(fields: [jobId], references: [id])\n  jobId     Int\n  status    JobStatus\n  remarks   String?\n  latitude  Float?\n  longitude Float?\n  updatedBy Int // userId\n  createdAt DateTime  @default(now())\n}\n",
  "inlineSchemaHash": "75e259358aef14e2044ee084812cb368cd10461dde6875083559dce157da05a8",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"online\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastLogin\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastLogout\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"TechnicianJobs\"},{\"name\":\"rollCallUsers\",\"kind\":\"object\",\"type\":\"RollCallUser\",\"relationName\":\"RollCallUserToUser\"}],\"dbName\":null},\"Job\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"vehicleReg\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"jobType\",\"kind\":\"enum\",\"type\":\"JobType\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"JobStatus\"},{\"name\":\"scheduledDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"governorSerial\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"governorStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"remarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"photoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientSignature\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"assignedTechnician\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TechnicianJobs\"},{\"name\":\"technicianId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"photos\",\"kind\":\"object\",\"type\":\"Photo\",\"relationName\":\"JobToPhoto\"},{\"name\":\"history\",\"kind\":\"object\",\"type\":\"JobHistory\",\"relationName\":\"JobToJobHistory\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"loginTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"logoutTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"}],\"dbName\":null},\"RollCallUser\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rollCall\",\"kind\":\"object\",\"type\":\"RollCall\",\"relationName\":\"RollCallToRollCallUser\"},{\"name\":\"rollCallId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RollCallUserToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"checkIn\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"checkOut\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"}],\"dbName\":null},\"RollCall\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"presentUsers\",\"kind\":\"object\",\"type\":\"RollCallUser\",\"relationName\":\"RollCallToRollCallUser\"}],\"dbName\":null},\"Photo\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobToPhoto\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"JobHistory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobToJobHistory\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"JobStatus\"},{\"name\":\"remarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"updatedBy\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

